create schema if not exists nacos collate utf8mb4_general_ci;

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL,
  `c_use` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `effect` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `type` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `c_schema` text COLLATE utf8_bin,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=81 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';

-- ----------------------------
-- Records of config_info
-- ----------------------------
BEGIN;
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1, 'application.yml', 'DEFAULT_GROUP', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10\n\nwaibao:\n  db:\n    ip: 10.61.20.211\n    port: 33306\n    username: root\n    password: wssy001\n\n  rocketmq:\n    ip: 10.61.20.211\n    port: 39876\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-', '9861a283ed7d3e5212afbad906c7d478', '2022-03-30 12:12:34', '2022-04-06 10:02:19', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (2, 'waibao-user.yml', 'DEFAULT_GROUP', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        user_extra:\n          actualDataNodes: master.user_extra\n        admin:\n          actualDataNodes: master.admin\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave', '17752094afe58acfd322127a208dced6', '2022-03-30 12:12:34', '2022-04-05 02:45:42', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (3, 'waibao-gateway.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user\n          uri: lb://waibao-user\n          filters:\n            - VerifyAndAddUserId=1,1\n          predicates:\n            - Path=/user/info,/user/check\n\n        - id: waibao-admin\n          uri: lb://waibao-user\n            - VerifyAndAddAdminId=1,1\n          predicates:\n            - Path=/admin/info,/admin/check\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', '48153c0d00ae9020f0c6569addf55121', '2022-03-30 12:12:34', '2022-04-01 05:27:22', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (4, 'waibao-rcde.yml', 'DEFAULT_GROUP', 'spring:\n  datasource:\n    url: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: ${waibao.db.username}\n    password: ${waibao.db.password}\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: rcde-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '431cccbaf2d21e6f9968a1902d9ac9aa', '2022-03-30 12:12:34', '2022-04-06 10:01:37', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (5, 'waibao-payment.yml', 'DEFAULT_GROUP', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master1.mq_msg_compensation\n        log_user_credit:\n          actualDataNodes: master2.log_user_credit\n        user_credit:\n          actualDataNodes: master2.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        log_payment:\n          actualDataNodes: master3.log_payment\n        payment:\n          actualDataNodes: master3.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master1:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master2:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master3:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: payment-producer', 'ee32238851e4cd3beadbf3abc670c68c', '2022-03-30 12:12:34', '2022-04-06 10:02:40', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (6, 'waibao-order.yml', 'DEFAULT_GROUP', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-order-user,master-order-retailer,slave-order-user,slave-order-retailer\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master1.mq_msg_compensation\n        log_order_goods:\n          actualDataNodes: master1.log_order_goods\n        order_user:\n          actualDataNodes: master2.order_user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: order_user_$->{user_id % 2}\n        order_retailer:\n          actualDataNodes: master3.order_retailer_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: retailer_id\n              algorithmExpression: order_retailer_$->{retailer_id % 2}\n\n      master-slave-rules:\n        master1:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master2:\n          master-data-source-name: master-order-user\n          SlaveDataSourceNames: slave-order-user\n        master3:\n          master-data-source-name: master-order-retailer\n          SlaveDataSourceNames: slave-order-retailer\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n', 'c967befa6edf54834949a03c2d81b446', '2022-03-30 12:12:34', '2022-04-06 10:02:56', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (7, 'waibao-seckill.yml', 'DEFAULT_GROUP', 'spring:\n  datasource:\n    url: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: ${waibao.db.username}\n    password: ${waibao.db.password}\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'e470ae39967fcb3859ae070f35004ab0', '2022-03-30 12:12:34', '2022-04-06 10:03:16', 'nacos', '172.17.0.1', '', 'waibao', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (34, 'nginx.conf', 'DEFAULT_GROUP', 'worker_processes  2;\nerror_log logs/error.log;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    lua_shared_dict goodsDict 1M;\n    lua_shared_dict riskUserDict 100M;\n    lua_shared_dict ipc_shared_dict1 1M;\n    lua_shared_dict ipc_shared_dict2 100M;\n\n    include             mime.types;\n    sendfile            on;\n    default_type        application/json;\n    lua_code_cache      off;\n    init_by_lua_file    lua/init.lua;\n    keepalive_timeout   65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        include         seckill/*.conf;\n\n    }\n}', '42a6b217e605f7dff8d95eb171de28e4', '2022-04-02 11:59:01', '2022-04-06 11:04:42', 'nacos', '172.17.0.1', '', 'openresty', '', '', '', 'text', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (39, 'seckill.conf', 'DEFAULT_GROUP', 'location /seckill/goods/info {\n    content_by_lua_file                 lua/limit.lua;\n\n    proxy_redirect                      off;\n    proxy_read_timeout                  600;\n    proxy_send_timeout                  600;\n    proxy_connect_timeout               60;\n    proxy_set_header Host               $host;\n    proxy_set_header X-Real-IP          $remote_addr;\n    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;\n\n}', '574708ef026a2982e3f3158da8bb6cfd', '2022-04-02 14:26:33', '2022-04-06 11:05:51', 'nacos', '172.17.0.1', '', 'openresty', '请放入 conf/seckill目录下', '', '', 'text', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (73, 'rcde.conf', 'DEFAULT_GROUP', 'location /rcde/request/check/ {\n    content_by_lua_file lua/check-risk-user.lua;\n\n    proxy_redirect                      off;\n    proxy_read_timeout                  600;\n    proxy_send_timeout                  600;\n    proxy_connect_timeout               60;\n    proxy_set_header Host               $host;\n    proxy_set_header X-Real-IP          $remote_addr;\n    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;\n\n}', 'b4f2ce711ea41db47863abf090e23c32', '2022-04-06 11:05:26', '2022-04-06 11:05:26', NULL, '172.17.0.1', '', 'openresty', '请放入 conf/seckill下', NULL, NULL, 'text', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (75, 'check-risk-user.lua', 'DEFAULT_GROUP', 'local mysqldb = require \"resty.mysql\"\nlocal times\nmysql , err = mysqldb:new()\nif not mysql then\n    ngx.log(ngx.ERR , \"mysql初始化失败:\" , err)\nend\n\nmysql:set_timeout(1000)\ntimes , err = mysql:get_reused_times()\n\nif not times or times == 0 then\n    ok , err , errcode , sqlstate = mysql:connect {\n        host = \"10.61.20.211\",\n        port = 33306,\n        database = \"waibao_v2\",\n        user = \"root\",\n        password = \"wssy001\",\n        charset = \"utf8\",\n        max_packet_size = 1024 * 1024,\n    }\n\n    if err then\n        ngx.log(ngx.ERR , \"mysql连接失败:\" , err)\n    end\n\n    if ok then\n        ngx.say(cjson.encode(ok))\n    end\n\nend\n\nlocal result = table.new(0 , 4)\nresult[\'time\'] = ngx.localtime()\nresult[\'timestamp\'] = ngx.time()\n\nngx.req.read_body()\nlocal bodyJson = ngx.req.get_body_data()\nbodyJson = string.gsub(bodyJson , \'(\"userId\":)(%s*)(%d+)\' , \'%1\"%3\"\')\nlocal riskUserVO = cjson.decode(bodyJson)\n--goodsId\n--userId\n\nlocal redisKey = table.new(2 , 0)\nredisKey[1] = \'risk-user-\'\nredisKey[2] = tostring(riskUserVO[\'goodsId\'])\nlocal temp = table.concat(redisKey , \'\')\n\nfunction checkRiskUser(bodyJson)\n    return redis:eval([[\n        local riskUserVO = cjson.decode(ARGV[1])\n        redis.call(\'SELECT\' , 15)\n        return tonumber(redis.call(\'SISMEMBER\' , KEYS[1] .. riskUserVO[\"goodsId\"] , riskUserVO[\"userId\"])) == 1\n    ]] , 1 , \'risk-user-\' , bodyJson)\nend\n\nfunction addRiskUser()\n    return redis:eval([[\n        local riskUserVO = cjson.decode(ARGV[1])\n        redis.call(\'SELECT\' , 15)\n        redis.call(\'SISMEMBER\' , KEYS[1] .. riskUserVO[\"goodsId\"] , riskUserVO[\"userId\"])\n    ]] , 1 , \'risk-user-\' , bodyJson)\nend\n\nfunction checkRiskUserFromBloomFilter(goodsId , userId)\n    local checkBloomFilterScript = [[\n        local entries = ARGV[2]\n        local precision = ARGV[3]\n        local count = redis.call(\'GET\' , ARGV[1] .. \':count\')\n\n        if not count then\n            return 0\n        end\n\n        local factor = math.ceil((entries + count) / entries)\n        local index = math.ceil(math.log(factor) / 0.69314718055995)\n        local scale = math.pow(2 , index - 1) * entries\n\n        local hash = redis.sha1hex(ARGV[4])\n\n        local h = { }\n        h[0] = tonumber(string.sub(hash , 1 , 8) , 16)\n        h[1] = tonumber(string.sub(hash , 9 , 16) , 16)\n        h[2] = tonumber(string.sub(hash , 17 , 24) , 16)\n        h[3] = tonumber(string.sub(hash , 25 , 32) , 16)\n\n        local maxbits = math.floor((scale * math.log(precision * math.pow(0.5 , index))) / -0.4804530139182)\n\n        local maxk = math.floor(0.69314718055995 * maxbits / scale)\n        local b = { }\n\n        for i = 1 , maxk do\n            table.insert(b , h[i % 2] + i * h[2 + (((i + (i % 2)) % 4) / 2)])\n        end\n\n        for n = 1 , index do\n            local key = ARGV[1] .. \':\' .. n\n            local found = true\n            local scalen = math.pow(2 , n - 1) * entries\n\n            local bits = math.floor((scalen * math.log(precision * math.pow(0.5 , n))) / -0.4804530139182)\n\n            local k = math.floor(0.69314718055995 * bits / scalen)\n\n            for i = 1 , k do\n                if redis.call(\'GETBIT\' , key , b[i] % bits) == 0 then\n                    found = false\n                    break\n                end\n            end\n\n            if found then\n                return true\n            end\n        end\n\n        return false\n    ]]\n\n    return redis:eval(checkBloomFilterScript , 0 , \'bloom-filter-risk-user\' , 100000 , 0.001 , goodsId .. userId)\nend\n\nfunction addToBloomFilter(goodsId , userId)\n    local addToBloomFilterScript = [[\n        local entries = ARGV[2]\n        local precision = ARGV[3]\n        local hash = redis.sha1hex(ARGV[4])\n        local countkey = ARGV[1] .. \':count\'\n        local count = redis.call(\'GET\' , countkey)\n        if not count then\n            count = 1\n        else\n            count = count + 1\n        end\n\n        local factor = math.ceil((entries + count) / entries)\n        local index = math.ceil(math.log(factor) / 0.69314718055995)\n        local scale = math.pow(2 , index - 1) * entries\n        local key = ARGV[1] .. \':\' .. index\n\n        local bits = math.floor(-(scale * math.log(precision * math.pow(0.5 , index))) / 0.4804530139182)\n\n        local k = math.floor(0.69314718055995 * bits / scale)\n\n        local h = { }\n        h[0] = tonumber(string.sub(hash , 1 , 8) , 16)\n        h[1] = tonumber(string.sub(hash , 9 , 16) , 16)\n        h[2] = tonumber(string.sub(hash , 17 , 24) , 16)\n        h[3] = tonumber(string.sub(hash , 25 , 32) , 16)\n\n        local found = true\n        for i = 1 , k do\n            if redis.call(\'SETBIT\' , key , (h[i % 2] + i * h[2 + (((i + (i % 2)) % 4) / 2)]) % bits , 1) == 0 then\n                found = false\n            end\n        end\n\n        if found == false then\n            -- INCR is a little bit faster than SET.\n            redis.call(\'INCR\' , countkey)\n        end\n    ]]\n\n    return redis:eval(addToBloomFilterScript , 0 , \'bloom-filter-risk-user\' , 100000 , 0.001 , goodsId .. userId)\nend\n\nfunction byte2bin(n)\n    local t = {}\n    for i = 7 , 0 , -1 do\n        t[#t + 1] = math.floor(n / 2 ^ i)\n        n = n % 2 ^ i\n    end\n    return t\nend\n\nfunction checkRiskUserFromMysql()\n    res , err , errcode , sqlstate = mysql:query([[\n        select goods_id,\n        rule_code\n        from rule\n        where goods_id =\n    ]] .. redisKey[2])\n\n    if err then\n        ngx.log(ngx.ERR , \"mysql查询rule失败:\" , err)\n        result[\'code\'] = -200\n        result[\'msg\'] = \'请求失败\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    if not res then\n        ngx.log(ngx.NOTICE , \"mysql查询rule失败，rule不存在\")\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    local ruleCodeArray = byte2bin(tonumber(res[1][\'rule_code\']))\n    local userExtra\n    local rule\n    local deposit\n    if ruleCodeArray[8] == 1 or ruleCodeArray[7] == 1 or ruleCodeArray[6] == 1 then\n\n        local tempSql = \'select user_id, defaulter, age, work_status from user_extra where user_id = \'\n        tempSql = tempSql .. riskUserVO[\'userId\'] .. \';\'\n        res , err , errcode , sqlstate = mysql:query(tempSql)\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询user_extra失败:\" , err)\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        userExtra = res[1]\n    end\n\n    --客户年龄\n    if ruleCodeArray[8] == 1 then\n        res , err , errcode , sqlstate = mysql:query([[\n        select count(id)\n        from rule]] .. \' where goods_id = \' .. riskUserVO[\'goodsId\'] .. \' and deny_age_below <= \' .. tonumber(userExtra[\'age\']))\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询客户年龄失败:\" , err , \'userId：\' , riskUserVO[\'userId\'])\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        if tonumber(res[1][\'count(id)\']) == 0 then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    --失信人名单\n    if ruleCodeArray[7] == 1 then\n        if tonumber(userExtra[\'defaulter\']) == 1 then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    --工作状态异常\n    if ruleCodeArray[6] == 1 then\n        res , err , errcode , sqlstate = mysql:query([[\n        select count(id)\n        from rule]] .. \' where goods_id = \' .. tonumber(riskUserVO[\'goodsId\']) .. \'and deny_work_status =\' .. userExtra[\'work_status\'])\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询客户年龄失败:\" , err , \'userId：\' , riskUserVO[\'userId\'])\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        if tonumber(res[1][\'count(id)\']) == 1 then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    --逾期记录\n    if ruleCodeArray[5] == 1 then\n        res , err , errcode , sqlstate = mysql:query([[\n        select allow_overdue_delayed_days,\n        deny_overdue_times\n        collect_years,\n        ignore_overdue_amount\n        from rule\n        where goods_id =\n        ]] .. tonumber(riskUserVO[\'goodsId\']))\n\n        rule = res[1]\n\n        local ignoreAmount = tonumber(rule[\'ignore_overdue_amount\'])\n        local now = ngx.today()\n        local year = tonumber(string.sub(now , 1 , 4)) - tonumber(rule[\'collect_years\'])\n        local month = string.sub(now , 5 , 7)\n        local day = tonumber(string.sub(now , 8 , 10))\n\n        res , err , errcode , sqlstate = mysql:query(\'select count(id) from deposit where user_id =\'\n                .. riskUserVO[\'userId\'] .. \'and debt_amount > \' .. ignoreAmount ..\n                \'and due_date >= \\\'\' .. year .. month .. day .. \'\\\'\')\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询deposit失败:\" , err)\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        if tonumber(res[1][\'count(id)\']) >= tonumber(rule[\'deny_overdue_times\']) then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n\n    end\nend\n\nres , err = goodsCache:get(temp , nil , checkRiskUser , bodyJson)\nif err then\n    ngx.log(ngx.ERR , \"mysql连接失败:\" , err)\nend\n\nif res or not checkRiskUserFromBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\']) then\n    result[\'code\'] = 200\n    result[\'msg\'] = \'请求已提交\'\n    ngx.say(cjson.encode(result))\n    return ngx.exit(200)\nend\n\ncheckRiskUserFromMysql()\n\nok , err = mysql:set_keepalive(60000 , 100)\nif not ok then\n    ngx.log(ngx.ERR , \"mysql keepalive失败: \" , err)\nend\n\nresult[\'code\'] = 200\nresult[\'msg\'] = \'请求成功\'\nngx.say(cjson.encode(result))\nreturn ngx.exit(200)', '75f9c5ba6ce7eb7ee77a8d73dfae5228', '2022-04-06 11:06:37', '2022-04-06 11:06:37', NULL, '172.17.0.1', '', 'openresty', '请放入lua下', NULL, NULL, 'text', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (76, 'init.lua', 'DEFAULT_GROUP', 'cjson = require(\"cjson\")\n\nlocal redis_util = require \"resty.redis-util\"\nredis = redis_util:new({\n    host = \'10.61.20.211\',\n    port = 6379,\n    db_index = 0,\n    password = \'wssy001\',\n    timeout = 1000,\n    keepalive = 60000,\n    pool_size = 100\n});\n\nlocal mlcache = require \"resty.mlcache\"\ngoodsCache , err = mlcache.new(\"mycache\" , \"goodsDict\" , {\n    lru_size = 3000,\n    ttl = 3,\n    neg_ttl = 3,\n    ipc_shm = \"ipc_shared_dict1\"\n})\n\nif not goodsCache then\n    ngx.log(ngx.ERR , \"goodsCache初始化失败:\" , err)\nend\n\nriskUserCache , err = mlcache.new(\"mycache2\" , \"riskUserDict\" , {\n    lru_size = 3000,\n    ttl = 3600,\n    neg_ttl = 10,\n    ipc_shm = \"ipc_shared_dict2\"\n})\n\nif not riskUserCache then\n    ngx.log(ngx.ERR , \"riskUserCache初始化失败:\" , err)\nend\n', 'dd65acd21554b5cf1b281f7bca370ee6', '2022-04-06 11:07:03', '2022-04-06 11:07:03', NULL, '172.17.0.1', '', 'openresty', '请放入lua下', NULL, NULL, 'text', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (77, 'limit.lua', 'DEFAULT_GROUP', 'local arg = ngx.req.get_uri_args()\n\nlocal result = table.new(0 , 4)\nresult[\'code\'] = -200\nresult[\'time\'] = ngx.localtime()\nresult[\'timestamp\'] = ngx.time()\n\nlocal redisKey = table.new(2 , 0)\nredisKey[1] = \'seckill-goods\'\nredisKey[2] = tostring(arg[\'goodsId\'])\nlocal temp = table.concat(redisKey , \'-\')\n\nfunction checkSeckillFinished()\n    return redis:eval([[\n        redis.call(\'SELECT\' , 5)\n        local key = KEYS[1]\n        local goodsId = tostring(ARGV[1])\n        return redis.call(\'HGET\' , key , goodsId)\n    ]] , 1 , \'seckill-goods-status\' , redisKey[2])\nend\n\nfunction checkGoodsStorage()\n    return redis:eval([[\n        redis.call(\'SELECT\' , 5)\n        local key = KEYS[1]\n        local field = tostring(ARGV[1])\n        return redis.call(\'HGET\' , key , field)\n    ]] , 1 , temp , \'storage\')\nend\n\nlocal res , err = goodsCache:get(redisKey[2] , nil , checkSeckillFinished , temp)\n\nif err or res == nil then\n    if err then\n        ngx.log(ngx.ERR , \"获取商品状态失败：\" , err)\n    else\n        ngx.log(ngx.ERR , \"获取商品状态失败，状态不存在\")\n    end\n    return\nend\n\nif not res then\n    result[\'msg\'] = \'秒杀已结束\'\n    ngx.say(cjson.encode(result))\n    return ngx.exit(200)\nelse\n    ngx.log(ngx.NOTICE , \"获取商品状态成功，goodsId：\" , redisKey[2] , \'，状态：\' , res)\nend\n\nres , err = checkGoodsStorage()\nif err or not res then\n    if err then\n        ngx.log(ngx.ERR , \"获取商品库存失败：\" , err)\n        return\n    end\n    ngx.log(ngx.ERR , \"获取商品库存失败，库存不存在\")\n    return\nelse\n    ngx.log(ngx.NOTICE , \"获取商品库存成功，goodsId：\" , redisKey[2] , \'，库存：\' , res)\n    if tonumber(res) <= 0 then\n        result[\'msg\'] = \'秒杀已结束\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\nend', '7c2c4bdab4ff71f3aa95eb7cad01e000', '2022-04-06 11:07:26', '2022-04-06 11:07:26', NULL, '172.17.0.1', '', 'openresty', '请放入lua下', NULL, NULL, 'text', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (78, 'redis-util.lua', 'DEFAULT_GROUP', '-- Copyright (C) Anjia (anjia0532)\n\nlocal redis_c = require(\"resty.redis\")\n\nlocal ok, new_tab = pcall(require, \"table.new\")\nif not ok or type(new_tab) ~= \"function\" then\n    new_tab = function (narr, nrec) return {} end\nend\n\nlocal _M = new_tab(0, 54)\n\n_M._VERSION = \'0.07\'\n\nlocal mt = {__index = _M}\n\n\nlocal ngx_log               = ngx.log\nlocal debug                 = ngx.config.debug\n\nlocal DEBUG                 = ngx.DEBUG\nlocal CRIT                  = ngx.CRIT\n\nlocal MAX_PORT              = 65535\n\n\nlocal host                  = \'127.0.0.1\'\nlocal port                  = 6379\nlocal db_index              = 0\nlocal password              = nil\nlocal keepalive             = 60000 --60s\nlocal pool_size             = 100\nlocal timeout             = 3000 --3s   --modify by hirryli\n\n\n-- if res is ngx.null or nil or type(res) is table and all value is ngx.null return true else false\nlocal function _is_null(res)\n  if res == ngx.null or res ==nil then\n    return true\n  elseif type(res) == \"table\" then\n    for _, v in pairs(res) do\n      if v ~= ngx.null then\n        return false\n      end\n    end\n    -- thanks for https://github.com/anjia0532/lua-resty-redis-util/issues/3\n    return true \n  end\n  return false\nend\n\n\nlocal function _debug_err(msg,err)\n  if debug then\n    ngx_log(DEBUG, msg ,err)\n  end\nend\n\n-- encapsulation redis connect\nlocal function _connect_mod(self,redis)\n  -- set timeout -- add by hirryli \n  -- ngx.say(\"timeout:\", timeout)\n  if timeout then    \n    redis:set_timeout(timeout)\n  else\n    redis:set_timeout(3000)\n  end\n\n  local ok, err\n  -- set redis unix socket\n  if host:find(\"unix:/\", 1, true) == 1 then\n    ok, err = redis:connect(host)\n  -- set redis host,port\n  else\n    ok, err = redis:connect(host, port)\n  end\n  if not ok or err then\n  \n    _debug_err(\"previous connection not finished,reason::\",err)\n    \n    return nil, err\n  end\n  \n  -- set auth\n  if password then\n    local times, err = redis:get_reused_times()\n    \n    if times == 0 then\n    \n      local ok, err = redis:auth(password)\n      if not ok or err then\n        _debug_err(\"failed to set redis password,reason::\",err)\n        return nil, err\n      end\n    elseif err then\n      _debug_err( \"failed to get this connect reused times,reason::\",err)\n      return nil, err\n    end\n  end\n  \n  if db_index >0 then \n    local ok, err = redis:select(db_index)\n      if not ok or err then\n        _debug_err( \"failed to select redis databse index to\" , db_index , \",reason::\",err)\n        return nil, err\n      end\n  end\n  \n  return redis, nil\nend\n\n\nlocal function _init_connect()\n  -- init redis\n  local redis, err = redis_c:new()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  -- get connect\n  local ok, err = _connect_mod(self,redis)\n  if not ok or err then\n    _debug_err( \"failed to create redis connection,reason::\",err)\n    return nil, err\n  end\n  return redis,nil\nend\n\n-- put it into the connection pool of size (default 100), with max idle time (default 60s)\nlocal function _set_keepalive_mod(self,redis )\n  return redis:set_keepalive(keepalive, pool_size)\nend\n\n-- encapsulation subscribe\nfunction _M.subscribe( self, channel )\n\n  -- init redis\n  local redis, err = _init_connect()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  -- sub channel\n  local res, err = redis:subscribe(channel)\n  if not res then\n    _debug_err(\"failed to subscribe channel,reason:\",err)\n    return nil, err\n  end\n\n  local function do_read_func ( do_read )\n    if do_read == nil or do_read == true then\n      res, err = redis:read_reply()\n      if not res then\n        _debug_err(\"failed to read subscribe channel reply,reason:\",err)\n        return nil, err\n      end\n      return res\n    end\n    \n    -- if do_read is false \n    redis:unsubscribe(channel)\n    _set_keepalive_mod(self,redis)\n    return\n  end\n\n  return do_read_func\nend\n\n-- init pipeline,default cmds num is 4\nfunction _M.init_pipeline(self, n)\n  self._reqs = new_tab(n or 4, 0)\nend\n\n-- cancel pipeline\nfunction _M.cancel_pipeline(self)\n  self._reqs = nil\nend\n\n-- commit pipeline\nfunction _M.commit_pipeline(self)\n  -- get cache cmds\n  local _reqs = rawget(self, \"_reqs\") \n  if not _reqs then\n    _debug_err(\"failed to commit pipeline,reason:no pipeline\")\n    return nil, \"no pipeline\"\n  end\n\n  self._reqs = nil\n\n  -- init redis\n  local redis, err = _init_connect()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  redis:init_pipeline()\n  \n   --redis command like set/get ...\n  for _, vals in ipairs(_reqs) do\n    -- vals[1] is redis cmd\n    local fun = redis[vals[1]]\n    -- get params without cmd\n    table.remove(vals , 1)\n    -- invoke redis cmd \n    fun(redis, unpack(vals))\n  end\n\n  -- commit pipeline\n  local results, err = redis:commit_pipeline()\n  if not results or err then\n    _debug_err( \"failed to commit pipeline,reason:\",err)\n    return {}, err\n  end\n\n  -- check null\n  if _is_null(results) then\n    results = {}\n    ngx.log(ngx.WARN, \"redis result is null\")\n  end\n\n  -- put it into the connection pool\n  _set_keepalive_mod(self,redis)\n\n  -- if null set default value nil\n  for i,value in ipairs(results) do\n    if _is_null(value) then\n      results[i] = nil\n    end\n  end\n\n  return results, err\nend\n\n-- common method\nlocal function do_command(self, cmd, ...)\n  \n  -- pipeline reqs\n  local _reqs = rawget(self, \"_reqs\")\n  if _reqs then\n    -- append reqs\n    _reqs[#_reqs + 1] = {cmd,...}\n    return\n  end\n  \n  -- init redis\n  local redis, err = _init_connect()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  -- exec redis cmd\n  local method = redis[cmd]\n  local result, err = method(redis, ...)\n  if not result or err then\n    return nil, err\n  end\n\n  -- check null\n  if _is_null(result) then\n    result = nil\n  end\n\n  -- put it into the connection pool\n  local ok, err = _set_keepalive_mod(self,redis)\n  if not ok or err then\n    return nil, err\n  end\n\n  return result, nil\nend\n\n-- init options\nfunction _M.new(self, opts)\n  opts = opts or {} -- fixed https://github.com/anjia0532/lua-resty-redis-util/issues/4\n  if (type(opts) ~= \"table\") then\n    return nil, \"user_config must be a table\"\n  end\n\n  for k, v in pairs(opts) do\n    if k == \"host\" then\n      if type(v) ~= \"string\" then\n        return nil, \'\"host\" must be a string\'\n      end\n      host = v\n    elseif k == \"port\" then\n      if type(v) ~= \"number\" then\n        return nil, \'\"port\" must be a number\'\n      end\n      if v < 0 or v > MAX_PORT then\n        return nil, (\'\"port\" out of range 0~%s\'):format(MAX_PORT)\n      end\n      port = v\n    elseif k == \"password\" then\n      if type(v) ~= \"string\" then\n        return nil, \'\"password\" must be a string\'\n      end\n      password = v\n    elseif k == \"db_index\" then\n      if type(v) ~= \"number\" then\n        return nil, \'\"db_index\" must be a number\'\n      end\n      if v < 0 then\n        return nil, \'\"db_index\" must be >= 0\'\n      end\n      db_index = v\n    elseif k == \"timeout\" then\n      if type(v) ~= \"number\" or v < 0 then\n        return nil, \'invalid \"timeout\"\'\n      end\n      timeout = v\n    elseif k == \"keepalive\" then\n      if type(v) ~= \"number\" or v < 0 then\n        return nil, \'invalid \"keepalive\"\'\n      end\n      keepalive = v\n    elseif k == \"pool_size\" then\n      if type(v) ~= \"number\" or v < 0 then\n        return nil, \'invalid \"pool_size\"\'\n      end\n      pool_size = v\n    end\n  end\n  \n  if not (host and port) then\n    return nil, \"no redis server configured. \\\"host\\\"/\\\"port\\\" is required.\"\n  end\n  \n  return setmetatable({},mt)\nend\n\n-- dynamic cmd\nsetmetatable(_M, {__index = function(self, cmd)\n    local method =\n        function (self, ...)\n            return do_command(self, cmd, ...)\n        end\n\n  -- cache the lazily generated method in our\n  -- module table\n    _M[cmd] = method\n    return method\nend})\n\nreturn _M', '7e203abdab2136abd18a45ea63e0f067', '2022-04-06 11:09:53', '2022-04-06 11:09:53', NULL, '172.17.0.1', '', 'openresty', '请放入lualib/resty下', NULL, NULL, 'text', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (79, 'mlcache.luavim: st=4 sts=4 sw=4 et:\n\nlocal cjson      = require \"cjson.safe\"\nlocal new_tab    = require \"table.new\"\nlocal lrucache   = require \"resty.lrucache\"\nlocal resty_lock = require \"resty.lock\"\nlocal tablepool\ndo\nlocal pok\npok, tablepool = pcall(require, \"tablepool\")\nif not pok then\n-- fallback for OpenResty < 1.15.8.1\ntablepool = {\nfetch = function(_, narr, nrec)\nreturn new_tab(narr, nrec)\nend,\nrelease = function(_, _, _)\n-- nop (obj will be subject to GC)\nend,\n}\nend\nend\n\n\nlocal now          = ngx.now\nlocal min          = math.min\nlocal ceil         = math.ceil\nlocal fmt          = string.format\nlocal sub          = string.sub\nlocal find         = string.find\nlocal type         = type\nlocal xpcall       = xpcall\nlocal traceback    = debug.traceback\nlocal error        = error\nlocal tostring     = tostring\nlocal tonumber     = tonumber\nlocal thread_spawn = ngx.thread.spawn\nlocal thread_wait  = ngx.thread.wait\nlocal setmetatable = setmetatable\nlocal shared       = ngx.shared\nlocal ngx_log      = ngx.log\nlocal WARN         = ngx.WARN\nlocal ERR          = ngx.ERR\n\n\nlocal CACHE_MISS_SENTINEL_LRU = {}\nlocal LOCK_KEY_PREFIX = \"lua-resty-mlcache:lock:\"\nlocal LRU_INSTANCES = setmetatable({}, { __mode = \"v\" })\nlocal SHM_SET_DEFAULT_TRIES = 3\nlocal BULK_DEFAULT_CONCURRENCY = 3\n\n\nlocal TYPES_LOOKUP = {\nnumber  = 1,\nboolean = 2,\nstring  = 3,\ntable   = 4,\n}\n\n\nlocal SHM_FLAGS = {\nstale = 0x00000001,\n}\n\n\nlocal marshallers = {\nshm_value = function(str_value, value_type, at, ttl)\nreturn fmt(\"%d:%f:%f:%s\", value_type, at, ttl, str_value)\nend,\n\nshm_nil = function(at, ttl)\nreturn fmt(\"0:%f:%f:\", at, ttl)\nend,\n\n[1] = function(number) -- number\nreturn tostring(number)\nend,\n\n[2] = function(bool)   -- boolean\nreturn bool and \"true\" or \"false\"\nend,\n\n[3] = function(str)    -- string\nreturn str\nend,\n\n[4] = function(t)      -- table\nlocal json, err = cjson.encode(t)\nif not json then\nreturn nil, \"could not encode table value: \" .. err\nend\n\nreturn json\nend,\n}\n\n\nlocal unmarshallers = {\nshm_value = function(marshalled)\n-- split our shm marshalled value by the hard-coded \":\" tokens\n-- \"type:at:ttl:value\"\n-- 1:1501831735.052000:0.500000:123\nlocal ttl_last = find(marshalled, \":\", 21, true) - 1\n\nlocal value_type = sub(marshalled, 1, 1)         -- n:...\nlocal at         = sub(marshalled, 3, 19)        -- n:1501831160\nlocal ttl        = sub(marshalled, 21, ttl_last)\nlocal str_value  = sub(marshalled, ttl_last + 2)\n\nreturn str_value, tonumber(value_type), tonumber(at), tonumber(ttl)\nend,\n\n[0] = function() -- nil\nreturn nil\nend,\n\n[1] = function(str) -- number\nreturn tonumber(str)\nend,\n\n[2] = function(str) -- boolean\nreturn str == \"true\"\nend,\n\n[3] = function(str) -- string\nreturn str\nend,\n\n[4] = function(str) -- table\nlocal t, err = cjson.decode(str)\nif not t then\nreturn nil, \"could not decode table value: \" .. err\nend\n\nreturn t\nend,\n}\n\n\nlocal function rebuild_lru(self)\nif self.lru then\nif self.lru.flush_all then\nself.lru:flush_all()\nreturn\nend\n\n-- fallback for OpenResty < 1.13.6.2\n-- Invalidate the entire LRU by GC-ing it.\nLRU_INSTANCES[self.name] = nil\nself.lru = nil\nend\n\n-- Several mlcache instances can have the same name and hence, the same\n-- lru instance. We need to GC such LRU instance when all mlcache instances\n-- using them are GC\'ed. We do this with a weak table.\nlocal lru = LRU_INSTANCES[self.name]\nif not lru then\nlru = lrucache.new(self.lru_size)\nLRU_INSTANCES[self.name] = lru\nend\n\nself.lru = lru\nend\n\n\nlocal _M     = {\n_VERSION = \"2.5.0\",\n_AUTHOR  = \"Thibault Charbonnier\",\n_LICENSE = \"MIT\",\n_URL     = \"https://github.com/thibaultcha/lua-resty-mlcache\",\n}\nlocal mt = { __index = _M }\n\n\nfunction _M.new(name, shm, opts)\nif type(name) ~= \"string\" then\nerror(\"name must be a string\", 2)\nend\n\nif type(shm) ~= \"string\" then\nerror(\"shm must be a string\", 2)\nend\n\nif opts ~= nil then\nif type(opts) ~= \"table\" then\nerror(\"opts must be a table\", 2)\nend\n\nif opts.lru_size ~= nil and type(opts.lru_size) ~= \"number\" then\nerror(\"opts.lru_size must be a number\", 2)\nend\n\nif opts.ttl ~= nil then\nif type(opts.ttl) ~= \"number\" then\nerror(\"opts.ttl must be a number\", 2)\nend\n\nif opts.ttl < 0 then\nerror(\"opts.ttl must be >= 0\", 2)\nend\nend\n\nif opts.neg_ttl ~= nil then\nif type(opts.neg_ttl) ~= \"number\" then\nerror(\"opts.neg_ttl must be a number\", 2)\nend\n\nif opts.neg_ttl < 0 then\nerror(\"opts.neg_ttl must be >= 0\", 2)\nend\nend\n\nif opts.resurrect_ttl ~= nil then\nif type(opts.resurrect_ttl) ~= \"number\" then\nerror(\"opts.resurrect_ttl must be a number\", 2)\nend\n\nif opts.resurrect_ttl < 0 then\nerror(\"opts.resurrect_ttl must be >= 0\", 2)\nend\nend\n\nif opts.resty_lock_opts ~= nil\nand type(opts.resty_lock_opts) ~= \"table\"\nthen\nerror(\"opts.resty_lock_opts must be a table\", 2)\nend\n\nif opts.ipc_shm ~= nil and type(opts.ipc_shm) ~= \"string\" then\nerror(\"opts.ipc_shm must be a string\", 2)\nend\n\nif opts.ipc ~= nil then\nif opts.ipc_shm then\nerror(\"cannot specify both of opts.ipc_shm and opts.ipc\", 2)\nend\n\nif type(opts.ipc) ~= \"table\" then\nerror(\"opts.ipc must be a table\", 2)\nend\n\nif type(opts.ipc.register_listeners) ~= \"function\" then\nerror(\"opts.ipc.register_listeners must be a function\", 2)\nend\n\nif type(opts.ipc.broadcast) ~= \"function\" then\nerror(\"opts.ipc.broadcast must be a function\", 2)\nend\n\nif opts.ipc.poll ~= nil and type(opts.ipc.poll) ~= \"function\" then\nerror(\"opts.ipc.poll must be a function\", 2)\nend\nend\n\nif opts.l1_serializer ~= nil\nand type(opts.l1_serializer) ~= \"function\"\nthen\nerror(\"opts.l1_serializer must be a function\", 2)\nend\n\nif opts.shm_set_tries ~= nil then\nif type(opts.shm_set_tries) ~= \"number\" then\nerror(\"opts.shm_set_tries must be a number\", 2)\nend\n\nif opts.shm_set_tries < 1 then\nerror(\"opts.shm_set_tries must be >= 1\", 2)\nend\nend\n\nif opts.shm_miss ~= nil and type(opts.shm_miss) ~= \"string\" then\nerror(\"opts.shm_miss must be a string\", 2)\nend\n\nif opts.shm_locks ~= nil and type(opts.shm_locks) ~= \"string\" then\nerror(\"opts.shm_locks must be a string\", 2)\nend\nelse\nopts = {}\nend\n\nlocal dict = shared[shm]\nif not dict then\nreturn nil, \"no such lua_shared_dict: \" .. shm\nend\n\nlocal dict_miss\nif opts.shm_miss then\ndict_miss = shared[opts.shm_miss]\nif not dict_miss then\nreturn nil, \"no such lua_shared_dict for opts.shm_miss: \"\n.. opts.shm_miss\nend\nend\n\nif opts.shm_locks then\nlocal dict_locks = shared[opts.shm_locks]\nif not dict_locks then\nreturn nil, \"no such lua_shared_dict for opts.shm_locks: \"\n.. opts.shm_locks\nend\nend\n\nlocal self          = {\nname            = name,\ndict            = dict,\nshm             = shm,\ndict_miss       = dict_miss,\nshm_miss        = opts.shm_miss,\nshm_locks       = opts.shm_locks or shm,\nttl             = opts.ttl     or 30,\nneg_ttl         = opts.neg_ttl or 5,\nresurrect_ttl   = opts.resurrect_ttl,\nlru_size        = opts.lru_size or 100,\nresty_lock_opts = opts.resty_lock_opts,\nl1_serializer   = opts.l1_serializer,\nshm_set_tries   = opts.shm_set_tries or SHM_SET_DEFAULT_TRIES,\ndebug           = opts.debug,\n}\n\nif opts.ipc_shm or opts.ipc then\nself.events = {\n[\"invalidation\"] = {\nchannel = fmt(\"mlcache:invalidations:%s\", name),\nhandler = function(key)\nself.lru:delete(key)\nend,\n},\n[\"purge\"] = {\nchannel = fmt(\"mlcache:purge:%s\", name),\nhandler = function()\nrebuild_lru(self)\nend,\n}\n}\n\nif opts.ipc_shm then\nlocal mlcache_ipc = require \"resty.mlcache.ipc\"\n\nlocal ipc, err = mlcache_ipc.new(opts.ipc_shm, opts.debug)\nif not ipc then\nreturn nil, \"failed to initialize mlcache IPC \" ..\n\"(could not instantiate mlcache.ipc): \" .. err\nend\n\nfor _, ev in pairs(self.events) do\nipc:subscribe(ev.channel, ev.handler)\nend\n\nself.broadcast = function(channel, data)\nreturn ipc:broadcast(channel, data)\nend\n\nself.poll = function(timeout)\nreturn ipc:poll(timeout)\nend\n\nself.ipc = ipc\n\nelse\n-- opts.ipc\nlocal ok, err = opts.ipc.register_listeners(self.events)\nif not ok and err ~= nil then\nreturn nil, \"failed to initialize custom IPC \" ..\n\"(opts.ipc.register_listeners returned an error): \"\n.. err\nend\n\nself.broadcast = opts.ipc.broadcast\nself.poll = opts.ipc.poll\n\nself.ipc = true\nend\nend\n\nif opts.lru then\nself.lru = opts.lru\n\nelse\nrebuild_lru(self)\nend\n\nreturn setmetatable(self, mt)\nend\n\n\nlocal function set_lru(self, key, value, ttl, neg_ttl, l1_serializer)\nif value == nil then\nttl = neg_ttl\nvalue = CACHE_MISS_SENTINEL_LRU\n\nelseif l1_serializer then\nlocal ok, err\nok, value, err = pcall(l1_serializer, value)\nif not ok then\nreturn nil, \"l1_serializer threw an error: \" .. value\nend\n\nif err then\nreturn nil, err\nend\n\nif value == nil then\nreturn nil, \"l1_serializer returned a nil value\"\nend\nend\n\nif ttl == 0 then\n-- indefinite ttl for lua-resty-lrucache is \'nil\'\nttl = nil\nend\n\nself.lru:set(key, value, ttl)\n\nreturn value\nend\n\n\nlocal function marshall_for_shm(value, ttl, neg_ttl)\nlocal at = now()\n\nif value == nil then\nreturn marshallers.shm_nil(at, neg_ttl), nil, true -- is_nil\nend\n\n-- serialize insertion time + Lua types for shm storage\n\nlocal value_type = TYPES_LOOKUP[type(value)]\n\nif not marshallers[value_type] then\nerror(\"cannot cache value of type \" .. type(value))\nend\n\nlocal str_marshalled, err = marshallers[value_type](value)\nif not str_marshalled then\nreturn nil, \"could not serialize value for lua_shared_dict insertion: \"\n.. err\nend\n\nreturn marshallers.shm_value(str_marshalled, value_type, at, ttl)\nend\n\n\nlocal function unmarshall_from_shm(shm_v)\nlocal str_serialized, value_type, at, ttl = unmarshallers.shm_value(shm_v)\n\nlocal value, err = unmarshallers[value_type](str_serialized)\nif err then\nreturn nil, err\nend\n\nreturn value, nil, at, ttl\nend\n\n\nlocal function set_shm(self, shm_key, value, ttl, neg_ttl, flags, shm_set_tries,\nthrow_no_mem)\nlocal shm_value, err, is_nil = marshall_for_shm(value, ttl, neg_ttl)\nif not shm_value then\nreturn nil, err\nend\n\nlocal shm = self.shm\nlocal dict = self.dict\n\nif is_nil then\nttl = neg_ttl\n\nif self.dict_miss then\nshm = self.shm_miss\ndict = self.dict_miss\nend\nend\n\n-- we will call `set()` N times to work around potential shm fragmentation.\n-- when the shm is full, it will only evict about 30 to 90 items (via\n-- LRU), which could lead to a situation where `set()` still does not\n-- have enough memory to store the cached value, in which case we\n-- try again to try to trigger more LRU evictions.\n\nlocal tries = 0\nlocal ok, err\n\nwhile tries < shm_set_tries do\ntries = tries + 1\n\nok, err = dict:set(shm_key, shm_value, ttl, flags or 0)\nif ok or err and err ~= \"no memory\" then\nbreak\nend\nend\n\nif not ok then\nif err ~= \"no memory\" or throw_no_mem then\nreturn nil, \"could not write to lua_shared_dict \'\" .. shm\n.. \"\': \" .. err\nend\n\nngx_log(WARN, \"could not write to lua_shared_dict \'\",\nshm, \"\' after \", tries, \" tries (no memory), \",\n\"it is either fragmented or cannot allocate more \",\n\"memory, consider increasing \'opts.shm_set_tries\'\")\nend\n\nreturn true\nend\n\n\nlocal function set_shm_set_lru(self, key, shm_key, value, ttl, neg_ttl, flags,\nshm_set_tries, l1_serializer, throw_no_mem)\n\nlocal ok, err = set_shm(self, shm_key, value, ttl, neg_ttl, flags,\nshm_set_tries, throw_no_mem)\nif not ok then\nreturn nil, err\nend\n\nreturn set_lru(self, key, value, ttl, neg_ttl, l1_serializer)\nend\n\n\nlocal function get_shm_set_lru(self, key, shm_key, l1_serializer)\nlocal v, shmerr, went_stale = self.dict:get_stale(shm_key)\nif v == nil and shmerr then\n-- shmerr can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. shmerr\nend\n\nif self.shm_miss and v == nil then\n-- if we cache misses in another shm, maybe it is there\nv, shmerr, went_stale = self.dict_miss:get_stale(shm_key)\nif v == nil and shmerr then\n-- shmerr can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. shmerr\nend\nend\n\nif v ~= nil then\nlocal value, err, at, ttl = unmarshall_from_shm(v)\nif err then\nreturn nil, \"could not deserialize value after lua_shared_dict \" ..\n\"retrieval: \" .. err\nend\n\nif went_stale then\nreturn value, nil, went_stale\nend\n\n-- \'shmerr\' is \'flags\' on :get_stale() success\nlocal is_stale = shmerr == SHM_FLAGS.stale\n\nlocal remaining_ttl\nif ttl == 0 then\n-- indefinite ttl, keep \'0\' as it means \'forever\'\nremaining_ttl = 0\n\nelse\n-- compute elapsed time to get remaining ttl for LRU caching\nremaining_ttl = ttl - (now() - at)\n\nif remaining_ttl <= 0 then\n-- value has less than 1ms of lifetime in the shm, avoid\n-- setting it in LRU which would be wasteful and could\n-- indefinitely cache the value when ttl == 0\nreturn value, nil, nil, is_stale\nend\nend\n\nvalue, err = set_lru(self, key, value, remaining_ttl, remaining_ttl,\nl1_serializer)\nif err then\nreturn nil, err\nend\n\nreturn value, nil, nil, is_stale\nend\nend\n\n\nlocal function check_opts(self, opts)\nlocal ttl\nlocal neg_ttl\nlocal resurrect_ttl\nlocal l1_serializer\nlocal shm_set_tries\n\nif opts ~= nil then\nif type(opts) ~= \"table\" then\nerror(\"opts must be a table\", 3)\nend\n\nttl = opts.ttl\nif ttl ~= nil then\nif type(ttl) ~= \"number\" then\nerror(\"opts.ttl must be a number\", 3)\nend\n\nif ttl < 0 then\nerror(\"opts.ttl must be >= 0\", 3)\nend\nend\n\nneg_ttl = opts.neg_ttl\nif neg_ttl ~= nil then\nif type(neg_ttl) ~= \"number\" then\nerror(\"opts.neg_ttl must be a number\", 3)\nend\n\nif neg_ttl < 0 then\nerror(\"opts.neg_ttl must be >= 0\", 3)\nend\nend\n\nresurrect_ttl = opts.resurrect_ttl\nif resurrect_ttl ~= nil then\nif type(resurrect_ttl) ~= \"number\" then\nerror(\"opts.resurrect_ttl must be a number\", 3)\nend\n\nif resurrect_ttl < 0 then\nerror(\"opts.resurrect_ttl must be >= 0\", 3)\nend\nend\n\nl1_serializer = opts.l1_serializer\nif l1_serializer ~= nil and type(l1_serializer) ~= \"function\" then\nerror(\"opts.l1_serializer must be a function\", 3)\nend\n\nshm_set_tries = opts.shm_set_tries\nif shm_set_tries ~= nil then\nif type(shm_set_tries) ~= \"number\" then\nerror(\"opts.shm_set_tries must be a number\", 3)\nend\n\nif shm_set_tries < 1 then\nerror(\"opts.shm_set_tries must be >= 1\", 3)\nend\nend\nend\n\nif not ttl then\nttl = self.ttl\nend\n\nif not neg_ttl then\nneg_ttl = self.neg_ttl\nend\n\nif not resurrect_ttl then\nresurrect_ttl = self.resurrect_ttl\nend\n\nif not l1_serializer then\nl1_serializer = self.l1_serializer\nend\n\nif not shm_set_tries then\nshm_set_tries = self.shm_set_tries\nend\n\nreturn ttl, neg_ttl, resurrect_ttl, l1_serializer, shm_set_tries\nend\n\n\nlocal function unlock_and_ret(lock, res, err, hit_lvl)\nlocal ok, lerr = lock:unlock()\nif not ok and lerr ~= \"unlocked\" then\nreturn nil, \"could not unlock callback: \" .. lerr\nend\n\nreturn res, err, hit_lvl\nend\n\n\nlocal function run_callback(self, key, shm_key, data, ttl, neg_ttl,\nwent_stale, l1_serializer, resurrect_ttl, shm_set_tries, cb, ...)\nlocal lock, err = resty_lock:new(self.shm_locks, self.resty_lock_opts)\nif not lock then\nreturn nil, \"could not create lock: \" .. err\nend\n\nlocal elapsed, lerr = lock:lock(LOCK_KEY_PREFIX .. shm_key)\nif not elapsed and lerr ~= \"timeout\" then\nreturn nil, \"could not acquire callback lock: \" .. lerr\nend\n\ndo\n-- check for another worker\'s success at running the callback, but\n-- do not return data if it is still the same stale value (this is\n-- possible if the value was still not evicted between the first\n-- get() and this one)\n\nlocal data2, err, went_stale2, stale2 = get_shm_set_lru(self, key,\nshm_key,\nl1_serializer)\nif err then\nreturn unlock_and_ret(lock, nil, err)\nend\n\nif data2 ~= nil and not went_stale2 then\n-- we got a fresh item from shm: other worker succeeded in running\n-- the callback\nif data2 == CACHE_MISS_SENTINEL_LRU then\ndata2 = nil\nend\n\nreturn unlock_and_ret(lock, data2, nil, stale2 and 4 or 2)\nend\nend\n\n-- we are either the 1st worker to hold the lock, or\n-- a subsequent worker whose lock has timed out before the 1st one\n-- finished to run the callback\n\nif lerr == \"timeout\" then\nlocal errmsg = \"could not acquire callback lock: timeout\"\n\n-- no stale data nor desire to resurrect it\nif not went_stale or not resurrect_ttl then\nreturn nil, errmsg\nend\n\n-- do not resurrect the value here (another worker is running the\n-- callback and will either get the new value, or resurrect it for\n-- us if the callback fails)\n\nngx_log(WARN, errmsg)\n\n-- went_stale is true, hence the value cannot be set in the LRU\n-- cache, and cannot be CACHE_MISS_SENTINEL_LRU\n\nreturn data, nil, 4\nend\n\n-- still not in shm, we are the 1st worker to hold the lock, and thus\n-- responsible for running the callback\n\nlocal pok, perr, err, new_ttl = xpcall(cb, traceback, ...)\nif not pok then\nreturn unlock_and_ret(lock, nil, \"callback threw an error: \" ..\ntostring(perr))\nend\n\nif err then\n-- callback returned nil + err\n\n-- be resilient in case callbacks return wrong error type\nerr = tostring(err)\n\n-- no stale data nor desire to resurrect it\nif not went_stale or not resurrect_ttl then\nreturn unlock_and_ret(lock, perr, err)\nend\n\n-- we got \'data\' from the shm, even though it is stale\n--   1. log as warn that the callback returned an error\n--   2. resurrect: insert it back into shm if \'resurrect_ttl\'\n--   3. signify the staleness with a high hit_lvl of \'4\'\n\nngx_log(WARN, \"callback returned an error (\", err, \") but stale \",\n\"value found in shm will be resurrected for \",\nresurrect_ttl, \"s (resurrect_ttl)\")\n\nlocal res_data, res_err = set_shm_set_lru(self, key, shm_key,\ndata, resurrect_ttl,\nresurrect_ttl,\nSHM_FLAGS.stale,\nshm_set_tries, l1_serializer)\nif res_err then\nngx_log(WARN, \"could not resurrect stale data (\", res_err, \")\")\nend\n\nif res_data == CACHE_MISS_SENTINEL_LRU then\nres_data = nil\nend\n\nreturn unlock_and_ret(lock, res_data, nil, 4)\nend\n\n-- successful callback run returned \'data, nil, new_ttl?\'\n\ndata = perr\n\n-- override ttl / neg_ttl\n\nif type(new_ttl) == \"number\" then\nif new_ttl < 0 then\n-- bypass cache\nreturn unlock_and_ret(lock, data, nil, 3)\nend\n\nif data == nil then\nneg_ttl = new_ttl\n\nelse\nttl = new_ttl\nend\nend\n\ndata, err = set_shm_set_lru(self, key, shm_key, data, ttl, neg_ttl, nil,\nshm_set_tries, l1_serializer)\nif err then\nreturn unlock_and_ret(lock, nil, err)\nend\n\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\n-- unlock and return\n\nreturn unlock_and_ret(lock, data, nil, 3)\nend\n\n\nfunction _M:get(key, opts, cb, ...)\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\nif cb ~= nil and type(cb) ~= \"function\" then\nerror(\"callback must be nil or a function\", 2)\nend\n\n-- worker LRU cache retrieval\n\nlocal data = self.lru:get(key)\nif data == CACHE_MISS_SENTINEL_LRU then\nreturn nil, nil, 1\nend\n\nif data ~= nil then\nreturn data, nil, 1\nend\n\n-- not in worker\'s LRU cache, need shm lookup\n\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal namespaced_key = self.name .. key\n\n-- opts validation\n\nlocal ttl, neg_ttl, resurrect_ttl, l1_serializer, shm_set_tries =\ncheck_opts(self, opts)\n\nlocal err, went_stale, is_stale\ndata, err, went_stale, is_stale = get_shm_set_lru(self, key, namespaced_key,\nl1_serializer)\nif err then\nreturn nil, err\nend\n\nif data ~= nil and not went_stale then\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\nreturn data, nil, is_stale and 4 or 2\nend\n\n-- not in shm either\n\nif cb == nil then\n-- no L3 callback, early exit\nreturn nil, nil, -1\nend\n\n-- L3 callback, single worker to run it\n\nreturn run_callback(self, key, namespaced_key, data, ttl, neg_ttl,\nwent_stale, l1_serializer, resurrect_ttl,\nshm_set_tries, cb, ...)\nend\n\n\ndo\nlocal function run_thread(self, ops, from, to)\nfor i = from, to do\nlocal ctx = ops[i]\n\nctx.data, ctx.err, ctx.hit_lvl = run_callback(self, ctx.key,\nctx.shm_key, ctx.data,\nctx.ttl, ctx.neg_ttl,\nctx.went_stale,\nctx.l1_serializer,\nctx.resurrect_ttl,\nctx.shm_set_tries,\nctx.cb, ctx.arg)\nend\nend\n\n\nlocal bulk_mt = {}\nbulk_mt.__index = bulk_mt\n\n\nfunction _M.new_bulk(n_ops)\nlocal bulk = new_tab((n_ops or 2) * 4, 1) -- 4 slots per op\nbulk.n = 0\n\nreturn setmetatable(bulk, bulk_mt)\nend\n\n\nfunction bulk_mt:add(key, opts, cb, arg)\nlocal i = (self.n * 4) + 1\nself[i] = key\nself[i + 1] = opts\nself[i + 2] = cb\nself[i + 3] = arg\nself.n = self.n + 1\nend\n\n\nlocal function bulk_res_iter(res, i)\nlocal idx = i * 3 + 1\nif idx > res.n then\nreturn\nend\n\ni = i + 1\n\nlocal data = res[idx]\nlocal err = res[idx + 1]\nlocal hit_lvl = res[idx + 2]\n\nreturn i, data, err, hit_lvl\nend\n\n\nfunction _M.each_bulk_res(res)\nif not res.n then\nerror(\"res must have res.n field; is this a get_bulk() result?\", 2)\nend\n\nreturn bulk_res_iter, res, 0\nend\n\n\nfunction _M:get_bulk(bulk, opts)\nif type(bulk) ~= \"table\" then\nerror(\"bulk must be a table\", 2)\nend\n\nif not bulk.n then\nerror(\"bulk must have n field\", 2)\nend\n\nif opts then\nif type(opts) ~= \"table\" then\nerror(\"opts must be a table\", 2)\nend\n\nif opts.concurrency then\nif type(opts.concurrency) ~= \"number\" then\nerror(\"opts.concurrency must be a number\", 2)\nend\n\nif opts.concurrency <= 0 then\nerror(\"opts.concurrency must be > 0\", 2)\nend\nend\nend\n\nlocal n_bulk = bulk.n * 4\nlocal res = new_tab(n_bulk - n_bulk / 4, 1)\nlocal res_idx = 1\n\n-- only used if running L3 callbacks\nlocal n_cbs = 0\nlocal cb_ctxs\n\n-- bulk\n-- { \"key\", opts, cb, arg }\n--\n-- res\n-- { data, \"err\", hit_lvl }\n\nfor i = 1, n_bulk, 4 do\nlocal b_key = bulk[i]\nlocal b_opts = bulk[i + 1]\nlocal b_cb = bulk[i + 2]\n\nif type(b_key) ~= \"string\" then\nerror(\"key at index \" .. i .. \" must be a string for operation \" ..\nceil(i / 4) .. \" (got \" .. type(b_key) .. \")\", 2)\nend\n\nif type(b_cb) ~= \"function\" then\nerror(\"callback at index \" .. i + 2 .. \" must be a function \" ..\n\"for operation \" .. ceil(i / 4) .. \" (got \" .. type(b_cb) ..\n\")\", 2)\nend\n\n-- worker LRU cache retrieval\n\nlocal data = self.lru:get(b_key)\nif data ~= nil then\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\nres[res_idx] = data\n--res[res_idx + 1] = nil\nres[res_idx + 2] = 1\n\nelse\nlocal pok, ttl, neg_ttl, resurrect_ttl, l1_serializer, shm_set_tries\n= pcall(check_opts, self, b_opts)\nif not pok then\n-- strip the stacktrace\nlocal err = ttl:match(\"mlcache%.lua:%d+:%s(.*)\")\nerror(\"options at index \" .. i + 1 .. \" for operation \" ..\nceil(i / 4) .. \" are invalid: \" .. err, 2)\nend\n\n-- not in worker\'s LRU cache, need shm lookup\n-- we will prepare a task for each cache miss\nlocal namespaced_key = self.name .. b_key\n\nlocal err, went_stale, is_stale\ndata, err, went_stale, is_stale = get_shm_set_lru(self, b_key,\nnamespaced_key,\nl1_serializer)\nif err then\n--res[res_idx] = nil\nres[res_idx + 1] = err\n--res[res_idx + 2] = nil\n\nelseif data ~= nil and not went_stale then\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\nres[res_idx] = data\n--res[res_idx + 1] = nil\nres[res_idx + 2] = is_stale and 4 or 2\n\nelse\n-- not in shm either, we have to prepare a task to run the\n-- L3 callback\n\nn_cbs = n_cbs + 1\n\nif n_cbs == 1 then\ncb_ctxs = tablepool.fetch(\"bulk_cb_ctxs\", 1, 0)\nend\n\nlocal ctx = tablepool.fetch(\"bulk_cb_ctx\", 0, 15)\nctx.res_idx = res_idx\nctx.cb = b_cb\nctx.arg = bulk[i + 3] -- arg\nctx.key = b_key\nctx.shm_key = namespaced_key\nctx.data = data\nctx.ttl = ttl\nctx.neg_ttl = neg_ttl\nctx.went_stale = went_stale\nctx.l1_serializer = l1_serializer\nctx.resurrect_ttl = resurrect_ttl\nctx.shm_set_tries = shm_set_tries\nctx.data = data\nctx.err = nil\nctx.hit_lvl = nil\n\ncb_ctxs[n_cbs] = ctx\nend\nend\n\nres_idx = res_idx + 3\nend\n\nif n_cbs == 0 then\n-- no callback to run, all items were in L1/L2\nres.n = res_idx - 1\nreturn res\nend\n\n-- some L3 callbacks have to run\n-- schedule threads as per our concurrency settings\n-- we will use this thread as well\n\nlocal concurrency\nif opts then\nconcurrency = opts.concurrency\nend\n\nif not concurrency then\nconcurrency = BULK_DEFAULT_CONCURRENCY\nend\n\nlocal threads\nlocal threads_idx = 0\n\ndo\n-- spawn concurrent threads\nlocal thread_size\nlocal n_threads = min(n_cbs, concurrency) - 1\n\nif n_threads >  0 then\nthreads = tablepool.fetch(\"bulk_threads\", n_threads, 0)\nthread_size = ceil(n_cbs / concurrency)\nend\n\nif self.debug then\nngx.log(ngx.DEBUG, \"spawning \", n_threads, \" threads to run \",\nn_cbs, \" callbacks\")\nend\n\nlocal from = 1\nlocal rest = n_cbs\n\nfor i = 1, n_threads do\nlocal to\nif rest >= thread_size then\nrest = rest - thread_size\nto = from + thread_size - 1\nelse\nrest = 0\nto = from\nend\n\nif self.debug then\nngx.log(ngx.DEBUG, \"thread \", i, \" running callbacks \", from,\n\" to \", to)\nend\n\nthreads_idx = threads_idx + 1\nthreads[i] = thread_spawn(run_thread, self, cb_ctxs, from, to)\n\nfrom = from + thread_size\n\nif rest == 0 then\nbreak\nend\nend\n\nif rest > 0 then\n-- use this thread as one of our concurrent threads\nlocal to = from + rest - 1\n\nif self.debug then\nngx.log(ngx.DEBUG, \"main thread running callbacks \", from,\n\" to \", to)\nend\n\nrun_thread(self, cb_ctxs, from, to)\nend\nend\n\n-- wait for other threads\n\nfor i = 1, threads_idx do\nlocal ok, err = thread_wait(threads[i])\nif not ok then\n-- when thread_wait() fails, we don\'t get res_idx, and thus\n-- cannot populate the appropriate res indexes with the\n-- error\nngx_log(ERR, \"failed to wait for thread number \", i, \": \", err)\nend\nend\n\nfor i = 1, n_cbs do\nlocal ctx = cb_ctxs[i]\nlocal ctx_res_idx = ctx.res_idx\n\nres[ctx_res_idx] = ctx.data\nres[ctx_res_idx + 1] = ctx.err\nres[ctx_res_idx + 2] = ctx.hit_lvl\n\ntablepool.release(\"bulk_cb_ctx\", ctx, true) -- no clear tab\nend\n\ntablepool.release(\"bulk_cb_ctxs\", cb_ctxs)\n\nif threads then\ntablepool.release(\"bulk_threads\", threads)\nend\n\nres.n = res_idx - 1\n\nreturn res\nend\n\n\nend -- get_bulk()\n\n\nfunction _M:peek(key, stale)\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal namespaced_key = self.name .. key\n\nlocal v, err, went_stale = self.dict:get_stale(namespaced_key)\nif v == nil and err then\n-- err can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. err\nend\n\n-- if we specified shm_miss, it might be a negative hit cached\n-- there\nif self.dict_miss and v == nil then\nv, err, went_stale = self.dict_miss:get_stale(namespaced_key)\nif v == nil and err then\n-- err can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. err\nend\nend\n\nif went_stale and not stale then\nreturn nil\nend\n\nif v ~= nil then\nlocal value, err, at, ttl = unmarshall_from_shm(v)\nif err then\nreturn nil, \"could not deserialize value after lua_shared_dict \" ..\n\"retrieval: \" .. err\nend\n\nlocal remaining_ttl = ttl - (now() - at)\n\nreturn remaining_ttl, nil, value, went_stale\nend\nend\n\n\nfunction _M:set(key, opts, value)\nif not self.broadcast then\nerror(\"no ipc to propagate update, specify opts.ipc_shm or opts.ipc\", 2)\nend\n\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\ndo\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal ttl, neg_ttl, _, l1_serializer, shm_set_tries = check_opts(self,\nopts)\nlocal namespaced_key = self.name .. key\n\nif self.dict_miss then\n-- since we specified a separate shm for negative caches, we\n-- must make sure that we clear any value that may have been\n-- set in the other shm\nlocal dict = value == nil and self.dict or self.dict_miss\n\n-- TODO: there is a potential race-condition here between this\n--       :delete() and the subsequent :set() in set_shm()\nlocal ok, err = dict:delete(namespaced_key)\nif not ok then\nreturn nil, \"could not delete from shm: \" .. err\nend\nend\n\nlocal _, err = set_shm_set_lru(self, key, namespaced_key, value, ttl,\nneg_ttl, nil, shm_set_tries,\nl1_serializer, true)\nif err then\nreturn nil, err\nend\nend\n\nlocal _, err = self.broadcast(self.events.invalidation.channel, key)\nif err then\nreturn nil, \"could not broadcast update: \" .. err\nend\n\nreturn true\nend\n\n\nfunction _M:delete(key)\nif not self.broadcast then\nerror(\"no ipc to propagate deletion, specify opts.ipc_shm or opts.ipc\",\n2)\nend\n\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\n-- delete from shm first\ndo\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal namespaced_key = self.name .. key\n\nlocal ok, err = self.dict:delete(namespaced_key)\nif not ok then\nreturn nil, \"could not delete from shm: \" .. err\nend\n\n-- instance uses shm_miss for negative caches, since we don\'t know\n-- where the cached value is (is it nil or not?), we must remove it\n-- from both\nif self.dict_miss then\nok, err = self.dict_miss:delete(namespaced_key)\nif not ok then\nreturn nil, \"could not delete from shm: \" .. err\nend\nend\nend\n\n-- delete from LRU and propagate\nself.lru:delete(key)\n\nlocal _, err = self.broadcast(self.events.invalidation.channel, key)\nif err then\nreturn nil, \"could not broadcast deletion: \" .. err\nend\n\nreturn true\nend\n\n\nfunction _M:purge(flush_expired)\nif not self.broadcast then\nerror(\"no ipc to propagate purge, specify opts.ipc_shm or opts.ipc\", 2)\nend\n\nif not self.lru.flush_all and LRU_INSTANCES[self.name] ~= self.lru then\nerror(\"cannot purge when using custom LRU cache with \" ..\n\"OpenResty < 1.13.6.2\", 2)\nend\n\n-- clear shm first\nself.dict:flush_all()\n\n-- clear negative caches shm if specified\nif self.dict_miss then\nself.dict_miss:flush_all()\nend\n\nif flush_expired then\nself.dict:flush_expired()\n\nif self.dict_miss then\nself.dict_miss:flush_expired()\nend\nend\n\n-- clear LRU content and propagate\nrebuild_lru(self)\n\nlocal _, err = self.broadcast(self.events.purge.channel, \"\")\nif err then\nreturn nil, \"could not broadcast purge: \" .. err\nend\n\nreturn true\nend\n\n\nfunction _M:update(timeout)\nif not self.poll then\nerror(\"no polling configured, specify opts.ipc_shm or opts.ipc.poll\", 2)\nend\n\nlocal _, err = self.poll(timeout)\nif err then\nreturn nil, \"could not poll ipc events: \" .. err\nend\n\nreturn true\nend\n\n\nreturn _M\n', '5fb0acca50d5eda4b52a6d5e8729fd06', '2022-04-06 11:11:30', '2022-04-06 11:11:30', NULL, '172.17.0.1', '', 'openresty', '请放入lualib/resty下', NULL, NULL, 'text', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (80, 'ipc.luavim: st=4 sts=4 sw=4 et:\n\nlocal ERR          = ngx.ERR\nlocal WARN         = ngx.WARN\nlocal INFO         = ngx.INFO\nlocal sleep        = ngx.sleep\nlocal shared       = ngx.shared\nlocal worker_pid   = ngx.worker.pid\nlocal ngx_log      = ngx.log\nlocal fmt          = string.format\nlocal sub          = string.sub\nlocal find         = string.find\nlocal min          = math.min\nlocal type         = type\nlocal pcall        = pcall\nlocal error        = error\nlocal insert       = table.insert\nlocal tonumber     = tonumber\nlocal setmetatable = setmetatable\n\n\nlocal INDEX_KEY        = \"lua-resty-ipc:index\"\nlocal FORCIBLE_KEY     = \"lua-resty-ipc:forcible\"\nlocal POLL_SLEEP_RATIO = 2\n\n\nlocal function marshall(worker_pid, channel, data)\nreturn fmt(\"%d:%d:%s%s\", worker_pid, #data, channel, data)\nend\n\n\nlocal function unmarshall(str)\nlocal sep_1 = find(str, \":\", nil      , true)\nlocal sep_2 = find(str, \":\", sep_1 + 1, true)\n\nlocal pid      = tonumber(sub(str, 1        , sep_1 - 1))\nlocal data_len = tonumber(sub(str, sep_1 + 1, sep_2 - 1))\n\nlocal channel_last_pos = #str - data_len\n\nlocal channel = sub(str, sep_2 + 1, channel_last_pos)\nlocal data    = sub(str, channel_last_pos + 1)\n\nreturn pid, channel, data\nend\n\n\nlocal function log(lvl, ...)\nreturn ngx_log(lvl, \"[ipc] \", ...)\nend\n\n\nlocal _M = {}\nlocal mt = { __index = _M }\n\n\nfunction _M.new(shm, debug)\nlocal dict = shared[shm]\nif not dict then\nreturn nil, \"no such lua_shared_dict: \" .. shm\nend\n\nlocal self    = {\ndict      = dict,\npid       = debug and 0 or worker_pid(),\nidx       = 0,\ncallbacks = {},\n}\n\nreturn setmetatable(self, mt)\nend\n\n\nfunction _M:subscribe(channel, cb)\nif type(channel) ~= \"string\" then\nerror(\"channel must be a string\", 2)\nend\n\nif type(cb) ~= \"function\" then\nerror(\"callback must be a function\", 2)\nend\n\nif not self.callbacks[channel] then\nself.callbacks[channel] = { cb }\n\nelse\ninsert(self.callbacks[channel], cb)\nend\nend\n\n\nfunction _M:broadcast(channel, data)\nif type(channel) ~= \"string\" then\nerror(\"channel must be a string\", 2)\nend\n\nif type(data) ~= \"string\" then\nerror(\"data must be a string\", 2)\nend\n\nlocal marshalled_event = marshall(worker_pid(), channel, data)\n\nlocal idx, err = self.dict:incr(INDEX_KEY, 1, 0)\nif not idx then\nreturn nil, \"failed to increment index: \" .. err\nend\n\nlocal ok, err, forcible = self.dict:set(idx, marshalled_event)\nif not ok then\nreturn nil, \"failed to insert event in shm: \" .. err\nend\n\nif forcible then\n-- take note that eviction has started\n-- we repeat this flagging to avoid this key from ever being\n-- evicted itself\nlocal ok, err = self.dict:set(FORCIBLE_KEY, true)\nif not ok then\nreturn nil, \"failed to set forcible flag in shm: \" .. err\nend\nend\n\nreturn true\nend\n\n\n-- Note: if this module were to be used by users (that is, users can implement\n-- their own pub/sub events and thus, callbacks), this method would then need\n-- to consider the time spent in callbacks to prevent long running callbacks\n-- from penalizing the worker.\n-- Since this module is currently only used by mlcache, whose callback is an\n-- shm operation, we only worry about the time spent waiting for events\n-- between the \'incr()\' and \'set()\' race condition.\nfunction _M:poll(timeout)\nif timeout ~= nil and type(timeout) ~= \"number\" then\nerror(\"timeout must be a number\", 2)\nend\n\nlocal shm_idx, err = self.dict:get(INDEX_KEY)\nif err then\nreturn nil, \"failed to get index: \" .. err\nend\n\nif shm_idx == nil then\n-- no events to poll yet\nreturn true\nend\n\nif type(shm_idx) ~= \"number\" then\nreturn nil, \"index is not a number, shm tampered with\"\nend\n\nif not timeout then\ntimeout = 0.3\nend\n\nif self.idx == 0 then\nlocal forcible, err = self.dict:get(FORCIBLE_KEY)\nif err then\nreturn nil, \"failed to get forcible flag from shm: \" .. err\nend\n\nif forcible then\n-- shm lru eviction occurred, we are likely a new worker\n-- skip indexes that may have been evicted and resume current\n-- polling idx\nself.idx = shm_idx - 1\nend\n\nelse\n-- guard: self.idx <= shm_idx\nself.idx = min(self.idx, shm_idx)\nend\n\nlocal elapsed = 0\n\nfor _ = self.idx, shm_idx - 1 do\n-- fetch event from shm with a retry policy in case\n-- we run our :get() in between another worker\'s\n-- :incr() and :set()\n\nlocal v\nlocal idx = self.idx + 1\n\ndo\nlocal perr\nlocal pok        = true\nlocal sleep_step = 0.001\n\nwhile elapsed < timeout do\nv, err = self.dict:get(idx)\nif v ~= nil or err then\nbreak\nend\n\nif pok then\nlog(INFO, \"no event data at index \'\", idx, \"\', \",\n\"retrying in: \", sleep_step, \"s\")\n\n-- sleep is not available in all ngx_lua contexts\n-- if we fail once, never retry to sleep\npok, perr = pcall(sleep, sleep_step)\nif not pok then\nlog(WARN, \"could not sleep before retry: \", perr,\n\" (note: it is safer to call this function \",\n\"in contexts that support the ngx.sleep() \",\n\"API)\")\nend\nend\n\nelapsed    = elapsed + sleep_step\nsleep_step = min(sleep_step * POLL_SLEEP_RATIO,\ntimeout - elapsed)\nend\nend\n\n-- fetch next event on next iteration\n-- even if we timeout, we might miss 1 event (we return in timeout and\n-- we don\'t retry that event), but it\'s better than being stuck forever\n-- on an event that might have been evicted from the shm.\nself.idx = idx\n\nif elapsed >= timeout then\nreturn nil, \"timeout\"\nend\n\nif err then\nlog(ERR, \"could not get event at index \'\", self.idx, \"\': \", err)\n\nelseif type(v) ~= \"string\" then\nlog(ERR, \"event at index \'\", self.idx, \"\' is not a string, \",\n\"shm tampered with\")\n\nelse\nlocal pid, channel, data = unmarshall(v)\n\nif self.pid ~= pid then\n-- coming from another worker\nlocal cbs = self.callbacks[channel]\nif cbs then\nfor j = 1, #cbs do\nlocal pok, perr = pcall(cbs[j], data)\nif not pok then\nlog(ERR, \"callback for channel \'\", channel,\n\"\' threw a Lua error: \", perr)\nend\nend\nend\nend\nend\nend\n\nreturn true\nend\n\n\nreturn _M\n', '3766725ca52da89d0d08dd0a6241311c', '2022-04-06 11:12:27', '2022-04-06 11:12:27', NULL, '172.17.0.1', '', 'openresty', '请放入lualib/resty/mlcache下', NULL, NULL, 'text', NULL);
COMMIT;

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';

-- ----------------------------
-- Records of config_info_aggr
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';

-- ----------------------------
-- Records of config_info_beta
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';

-- ----------------------------
-- Records of config_info_tag
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info` (
  `id` bigint(64) unsigned NOT NULL,
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text COLLATE utf8_bin,
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL,
  `op_type` char(10) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
BEGIN;
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 1, 'application.yml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10', '2589275754f828bfba32e6198494f7fb', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 2, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n    shardingsphere:\n        datasource:\n        names: master,slave\n        master:\n            type: com.zaxxer.hikari.HikariDataSource\n            driverClassName: com.mysql.cj.jdbc.Driver\n            jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n            username: root\n            password: wssy001\n        slave:\n            type: com.zaxxer.hikari.HikariDataSource\n            driverClassName: com.mysql.cj.jdbc.Driver\n            jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n            username: root\n            password: wssy001\n\n        sharding:\n        tables:\n            user:\n            actualDataNodes: master.user_$->{0..1}\n            tableStrategy:\n                inline:\n                shardingColumn: id\n                algorithmExpression: user_$->{id % 2}\n            keyGenerator:\n                column: id\n                type: SNOWFLAKE\n\n        master-slave-rules:\n            master:\n            master-data-source-name: master\n            SlaveDataSourceNames: slave\nlogging:\n  level:\n    root: info', 'c76cd3f0eece1b3f9e6f2e060b8d9a14', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 3, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user #payment_routh    #路由的ID，没有固定规则但要求唯一，简易配合服务名\n          #          uri: http://localhost:8001         #匹配后提供服务的路由地址\n          uri: lb://waibao-user   #匹配后提供服务的路由地址，lb后跟提供服务的微服务的名，不要写错\n          predicates:\n            - Path=/**          #断言，路径相匹配的进行路由\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'e3a89b8930adbc35cdfc9ef47a8c0ebf', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 4, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: wssy001\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-', '6c8603c255b93641ad2540a77b428654', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 5, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_credit_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_payment?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_credit_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_payment?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: pay_id\n              algorithmExpression: payment_$->{pay_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-order-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-order-retailer:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\nlogging:\n  level:\n    root: info\n', '0b10ca27ff254b450865d41b972978ab', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 6, 'waibao-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-order-user,master-order-retailer,slave-order-user,slave-order-retailer\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        admin:\n          actualDataNodes: master.admin\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        log_order_goods:\n          actualDataNodes: master.log_order_goods\n        seckill_goods:\n          actualDataNodes: master.seckill_goods\n        order_user:\n          actualDataNodes: master-order-user.order_user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: order_user_$->{user_id % 2}\n        order_retailer:\n          actualDataNodes: master-order-retailer.order_retailer_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: retailer_id\n              algorithmExpression: order_retailer_$->{retailer_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-order-user:\n          master-data-source-name: master-order-user\n          SlaveDataSourceNames: slave-order-user\n        master-order-retailer:\n          master-data-source-name: master-order-retailer\n          SlaveDataSourceNames: slave-order-retailer\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n', 'e0081f263be1f0d374dc47550f91f63f', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 7, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', '46812f71c772fc74eae1c38deed203e5', '2022-03-30 12:12:34', '2022-03-30 12:12:34', NULL, '172.17.0.1', 'I', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (4, 8, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: wssy001\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-', '6c8603c255b93641ad2540a77b428654', '2022-03-30 12:30:21', '2022-03-30 12:30:21', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (4, 9, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: wssy001\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: rcde-producer', 'd1d9bd521a27a47054f05ffaee0978b5', '2022-03-30 12:47:48', '2022-03-30 12:47:48', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (4, 10, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: wssy001\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-\n', '5b16c0ff70fdb0040dad002fd599417d', '2022-03-30 13:00:26', '2022-03-30 13:00:26', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 11, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n    shardingsphere:\n        datasource:\n        names: master,slave\n        master:\n            type: com.zaxxer.hikari.HikariDataSource\n            driverClassName: com.mysql.cj.jdbc.Driver\n            jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n            username: root\n            password: wssy001\n        slave:\n            type: com.zaxxer.hikari.HikariDataSource\n            driverClassName: com.mysql.cj.jdbc.Driver\n            jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n            username: root\n            password: wssy001\n\n        sharding:\n        tables:\n            user:\n            actualDataNodes: master.user_$->{0..1}\n            tableStrategy:\n                inline:\n                shardingColumn: id\n                algorithmExpression: user_$->{id % 2}\n            keyGenerator:\n                column: id\n                type: SNOWFLAKE\n\n        master-slave-rules:\n            master:\n            master-data-source-name: master\n            SlaveDataSourceNames: slave\nlogging:\n  level:\n    root: info', 'c76cd3f0eece1b3f9e6f2e060b8d9a14', '2022-04-01 03:40:27', '2022-04-01 03:40:28', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 12, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n    shardingsphere:\n        datasource:\n        names: master,slave\n        master:\n            type: com.zaxxer.hikari.HikariDataSource\n            driverClassName: com.mysql.cj.jdbc.Driver\n            jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n            username: root\n            password: wssy001\n        slave:\n            type: com.zaxxer.hikari.HikariDataSource\n            driverClassName: com.mysql.cj.jdbc.Driver\n            jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n            username: root\n            password: wssy001\n\n        sharding:\n        tables:\n            user:\n            actualDataNodes: master.user_$->{0..1}\n            tableStrategy:\n                inline:\n                shardingColumn: id\n                algorithmExpression: user_$->{id % 2}\n            keyGenerator:\n                column: id\n                type: SNOWFLAKE\n\n        master-slave-rules:\n            master:\n            master-data-source-name: master\n            SlaveDataSourceNames: slave', '3b9e4cabfac8af2ed3596150f119b90b', '2022-04-01 03:45:06', '2022-04-01 03:45:07', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 13, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n    shardingsphere:\n        datasource:\n            names: master,slave\n            master:\n                type: com.zaxxer.hikari.HikariDataSource\n                driverClassName: com.mysql.cj.jdbc.Driver\n                jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n                username: root\n                password: wssy001\n            slave:\n                type: com.zaxxer.hikari.HikariDataSource\n                driverClassName: com.mysql.cj.jdbc.Driver\n                jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n                username: root\n                password: wssy001\n\n        sharding:\n            tables:\n                user:\n                actualDataNodes: master.user_$->{0..1}\n                tableStrategy:\n                inline:\n                shardingColumn: id\n                algorithmExpression: user_$->{id % 2}\n                keyGenerator:\n                column: id\n                type: SNOWFLAKE\n    \n            master-slave-rules:\n                master:\n                master-data-source-name: master\n                SlaveDataSourceNames: slave', 'a8be4a1a5e5d849f63a3985f8aead3b8', '2022-04-01 03:46:21', '2022-04-01 03:46:21', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 14, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  application:\n    name: waibao-user\n\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        user:\n        actualDataNodes: master.user_$->{0..1}\n        tableStrategy:\n          inline:\n          shardingColumn: id\n          algorithmExpression: user_$->{id % 2}\n        keyGenerator:\n          column: id\n          type: SNOWFLAKE\n  \n      master-slave-rules:\n        master:\n        master-data-source-name: master\n        SlaveDataSourceNames: slave', '8b3d80b0e617840bada421523710bd1a', '2022-04-01 03:47:14', '2022-04-01 03:47:15', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 15, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        user:\n        actualDataNodes: master.user_$->{0..1}\n        tableStrategy:\n          inline:\n          shardingColumn: id\n          algorithmExpression: user_$->{id % 2}\n        keyGenerator:\n          column: id\n          type: SNOWFLAKE\n  \n      master-slave-rules:\n        master:\n        master-data-source-name: master\n        SlaveDataSourceNames: slave', '857457a683c0ecbbbd52dbd684ae3a0b', '2022-04-01 03:51:42', '2022-04-01 03:51:42', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 16, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user #payment_routh    #路由的ID，没有固定规则但要求唯一，简易配合服务名\n          #          uri: http://localhost:8001         #匹配后提供服务的路由地址\n          uri: lb://waibao-user   #匹配后提供服务的路由地址，lb后跟提供服务的微服务的名，不要写错\n          predicates:\n            - Path=/**          #断言，路径相匹配的进行路由\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'e3a89b8930adbc35cdfc9ef47a8c0ebf', '2022-04-01 04:29:25', '2022-04-01 04:29:26', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 17, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user #payment_routh    #路由的ID，没有固定规则但要求唯一，简易配合服务名\n          #          uri: http://localhost:8001         #匹配后提供服务的路由地址\n          uri: lb://waibao-user   #匹配后提供服务的路由地址，lb后跟提供服务的微服务的名，不要写错\n          filters:\n          - VerifyAndAddUserId\n          predicates:\n            - Path=/**          #断言，路径相匹配的进行路由\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'd3d18f6a68483a368ad7d17211e2c32b', '2022-04-01 04:30:52', '2022-04-01 04:30:52', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 18, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user #payment_routh    #路由的ID，没有固定规则但要求唯一，简易配合服务名\n          #          uri: http://localhost:8001         #匹配后提供服务的路由地址\n          uri: lb://waibao-user   #匹配后提供服务的路由地址，lb后跟提供服务的微服务的名，不要写错\n          filters:\n          - VerifyAndAddUserId=\n          predicates:\n            - Path=/**          #断言，路径相匹配的进行路由\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'f39bbb3a4f9488e7e63c2a7901bac8c3', '2022-04-01 04:44:44', '2022-04-01 04:44:45', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 19, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user #payment_routh    #路由的ID，没有固定规则但要求唯一，简易配合服务名\n          #          uri: http://localhost:8001         #匹配后提供服务的路由地址\n          uri: lb://waibao-user   #匹配后提供服务的路由地址，lb后跟提供服务的微服务的名，不要写错\n          filters:\n          - VerifyAndAddUserId=1,1\n          predicates:\n            - Path=/**          #断言，路径相匹配的进行路由\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'cff51d0a77897813def403061f70652c', '2022-04-01 05:08:21', '2022-04-01 05:08:21', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 20, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user\n          uri: lb://waibao-user\n          filters:\n          - VerifyAndAddUserId=1,1\n          predicates:\n            - Path=/user/**\n\n        - id: waibao-admin\n          uri: lb://waibao-user\n          - VerifyAndAddAdminId=1,1\n          predicates:\n            - Path=/admin/**\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'a7a3520d3e0d71d66b91d335ab1980ae', '2022-04-01 05:18:50', '2022-04-01 05:18:50', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 21, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user\n          uri: lb://waibao-user\n          filters:\n          - VerifyAndAddUserId=1,1\n          predicates:\n            - Path=/user/info,/user/check\n\n        - id: waibao-admin\n          uri: lb://waibao-user\n          - VerifyAndAddAdminId=1,1\n          predicates:\n            - Path=/admin/**\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', '09cb3d5b7d1bc81e8d7c13937e9d66fb', '2022-04-01 05:23:30', '2022-04-01 05:23:30', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (3, 22, 'waibao-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: waibao-user\n          uri: lb://waibao-user\n          filters:\n            - VerifyAndAddUserId=1,1\n          predicates:\n            - Path=/user/info,/user/check\n\n        - id: waibao-admin\n          uri: lb://waibao-user\n            - VerifyAndAddAdminId=1,1\n          predicates:\n            - Path=/admin/**\n      globalcors:\n        cors-configurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n\n  main:\n    web-application-type: reactive', 'e826d29ac7d99907e50e879a28a591a5', '2022-04-01 05:27:21', '2022-04-01 05:27:22', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 23, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', '46812f71c772fc74eae1c38deed203e5', '2022-04-01 12:48:26', '2022-04-01 12:48:26', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 24, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        userExtra:\n          actualDataNodes: master.user_extra\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave', '2fdc2a7e492c216bf47c9404dba902d0', '2022-04-01 12:48:53', '2022-04-01 12:48:53', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 25, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\n  cloud:\n    nacos:\n      server-addr: 10.61.20.211:38848\n      discovery:\n        namespace: waibao\n      username: nacos\n      password: nacos\n\n      config:\n        namespace: waibao\n        extension-configs: application.yml,${spring.application.name}.yml\n\nrocketmq:\n  name-server: 10.60.64.66:39876\n  producer:\n    group: order-producer\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', '1cc8babcb11cb13de95ed4012735d42c', '2022-04-01 13:21:56', '2022-04-01 13:21:57', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1, 26, 'application.yml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10', '2589275754f828bfba32e6198494f7fb', '2022-04-02 04:51:16', '2022-04-02 04:51:17', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1, 27, 'application.yml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10\n\nwaibao:\n  db:\n    ip: 10.61.20.211\n    port: 33306\n    user-name: root\n    password: wssy001\n\n  redis:\n    ip: 10.61.20.211\n    port: 6379\n    password: wssy001\n\n  rocketmq:\n    ip: 10.61.20.211\n    port: 39876', '9d8f0200f5ae3b8ca86550b9f0ddecea', '2022-04-02 04:51:44', '2022-04-02 04:51:45', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1, 28, 'application.yml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10\n\nwaibao:\n  db:\n    ip: 10.61.20.211\n    port: 33306\n    user-name: root\n    password: wssy001\n\n  redis:\n    ip: 10.61.20.211\n    port: 6379\n    password: wssy001\n\n  rocketmq:\n    ip: 10.61.20.211\n    port: 39876', '9d8f0200f5ae3b8ca86550b9f0ddecea', '2022-04-02 04:52:53', '2022-04-02 04:52:53', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 29, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        userExtra:\n          actualDataNodes: master.user_extra\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave', '6458944d6806988bf31d48fa6b2f6ded', '2022-04-02 04:53:47', '2022-04-02 04:53:48', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1, 30, 'application.yml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10\n\nwaibao:\n  db:\n    ip: 10.61.20.211\n    port: 33306\n    username: root\n    password: wssy001\n\n  redis:\n    ip: 10.61.20.211\n    port: 6379\n    password: wssy001\n\n  rocketmq:\n    ip: 10.61.20.211\n    port: 39876', '4263c054054fe77dae5312c9632ca946', '2022-04-02 04:55:29', '2022-04-02 04:55:30', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 31, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\n  cloud:\n    nacos:\n      server-addr: 10.61.20.211:38848\n      discovery:\n        namespace: waibao\n      username: nacos\n      password: nacos\n\n      config:\n        namespace: waibao\n        extension-configs: application.yml,${spring.application.name}.yml\n\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'bb9d65c424e646d3796b008dbb5942ee', '2022-04-02 06:05:46', '2022-04-02 06:05:47', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 32, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        userExtra:\n          actualDataNodes: master.user_extra\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave', '48141986907d57697bf3aae737d5e2fc', '2022-04-02 08:20:56', '2022-04-02 08:20:57', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 33, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'c92bba944b160b3b946f5c8e3978600b', '2022-04-02 08:22:17', '2022-04-02 08:22:17', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 34, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n  sharding:\n      tables:\n        goods:\n          actualDataNodes: master.goods\n        log_seckill_goods:\n          actualDataNodes: master.log_seckill_goods\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        seckill_goods:\n          actualDataNodes: master.seckill_goods\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'bce8a83913af52d140f5295123ba1b04', '2022-04-02 08:55:41', '2022-04-02 08:55:42', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 35, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n  # sharding:\n  #     tables:\n  #       goods:\n  #         actualDataNodes: master.goods\n  #       log_seckill_goods:\n  #         actualDataNodes: master.log_seckill_goods\n  #       mq_msg_compensation:\n  #         actualDataNodes: master.mq_msg_compensation\n  #       seckill_goods:\n  #         actualDataNodes: master.seckill_goods\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'b473efe27b9de0e5dff95b7ac334ef9e', '2022-04-02 09:38:10', '2022-04-02 09:38:10', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 36, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        goods:\n          actualDataNodes: master.goods\n        log_seckill_goods:\n          actualDataNodes: master.log_seckill_goods\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        seckill_goods:\n          actualDataNodes: master.seckill_goods\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'd245231a62a64ae1871ae6d70b2f85d2', '2022-04-02 09:41:02', '2022-04-02 09:41:02', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 37, 'nginx.conf', 'DEFAULT_GROUP', '', 'worker_processes  2;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n    }\n\n}', 'ab9e5eef13e518f4e836476009b0bf75', '2022-04-02 11:59:01', '2022-04-02 11:59:01', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (34, 38, 'nginx.conf', 'DEFAULT_GROUP', '', 'worker_processes  2;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n    }\n\n}', 'ab9e5eef13e518f4e836476009b0bf75', '2022-04-02 13:06:17', '2022-04-02 13:06:18', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (34, 39, 'nginx.conf', 'DEFAULT_GROUP', '', 'worker_processes  2;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/json;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        include seckill/*.conf;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n    }\n\n}', 'babcf66e7ff59441a7d0faab9471aa37', '2022-04-02 13:08:20', '2022-04-02 13:08:20', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 40, 'rate.lua', 'DEFAULT_GROUP', '', '-- 请将此文件放入\"lualib/resty/limit/\"下\n-- Copyright (C) UPYUN, Inc.\n\n-- limit request rate using the token bucket method:\n--    https://en.wikipedia.org/wiki/Token_bucket\n\n\nlocal ffi = require \"ffi\"\nlocal math = require \"math\"\nlocal lock = require \"resty.lock\"\n\n\nlocal ffi_cast = ffi.cast\nlocal ffi_str = ffi.string\n\nlocal type = type\nlocal assert = assert\nlocal ngx_now = ngx.now\nlocal floor = math.floor\nlocal ngx_shared = ngx.shared\nlocal setmetatable = setmetatable\n\n\nffi.cdef[[\n    struct lua_resty_limit_rate_rec {\n        int64_t        avail;\n        uint64_t       last;  /* time in milliseconds */\n    };\n]]\nlocal const_rec_ptr_type = ffi.typeof(\"const struct lua_resty_limit_rate_rec*\")\nlocal rec_size = ffi.sizeof(\"struct lua_resty_limit_rate_rec\")\n\nlocal rec_cdata = ffi.new(\"struct lua_resty_limit_rate_rec\")\n\n\nlocal _M = {\n    _VERSION = \"0.1\",\n}\n\n\nlocal mt = {\n    __index = _M\n}\n\n\nlocal function acquire_lock(self, key)\n    if not self.lock_enable then\n        return true\n    end\n\n    local lock, err = lock:new(self.locks_shdict_name)\n    if not lock then\n        return nil, err\n    end\n\n    self.lock = lock\n\n    return lock:lock(key)\nend\n\n\nlocal function release_lock(self)\n    if not self.lock_enable then\n        return true\n    end\n\n    local lock = self.lock\n\n    return lock:unlock()\nend\n\n\nlocal function update(self, key, avail, last)\n    local dict = self.dict\n\n    rec_cdata.avail = avail\n    rec_cdata.last = last\n    dict:set(key, ffi_str(rec_cdata, rec_size))\n\n    -- ngx.log(ngx.ERR, \"key = \", key, \" avail = \", avail, \" last = \", last)\nend\n\n\nlocal function adjust(self, key, now)\n    local dict = self.dict\n\n    local res = {\n        last = now,\n        avail = self.capacity\n    }\n\n    local v = dict:get(key)\n    if v then\n        if type(v) ~= \"string\" or #v ~= rec_size then\n            return nil, \"shdict abused by other users\"\n        end\n\n        local rec = ffi_cast(const_rec_ptr_type, v)\n\n        res.last = tonumber(rec.last)\n        res.avail = tonumber(rec.avail)\n    end\n\n    local tick = floor((now - res.last) / self.interval)\n    res.last = res.last + tick * self.interval\n\n    if res.avail >= self.capacity then\n        return res\n    end\n\n    res.avail = res.avail + tick * self.quantum\n    if res.avail > self.capacity then\n        res.avail = self.capacity\n    end\n\n    return res\nend\n\n\nfunction _M.new(dict_name, interval, capacity, quantum, max_wait, opts)\n    local dict = ngx_shared[dict_name]\n    if not dict then\n        return nil, \"shared dict not found\"\n    end\n\n    if not quantum then\n        quantum = 1\n    end\n\n    assert(interval > 0 and capacity >= 0 and quantum > 0)\n\n    if not opts then\n        opts = {}\n    end\n\n    local lock_enable = opts.lock_enable or false\n    local locks_shdict_name = opts.locks_shdict_name or \"locks\"\n\n    local self = {\n        dict = dict,\n        interval = interval,\n        capacity = capacity,\n        quantum = quantum,\n        max_wait = max_wait,\n\n        lock_enable = lock_enable,\n        locks_shdict_name = locks_shdict_name,\n    }\n\n    return setmetatable(self, mt)\nend\n\n\nfunction _M.set_max_wait(self, max_wait)\n    self.max_wait = max_wait\nend\n\n\nfunction _M.take(self, key, count, commit, fake_now)\n    assert(key and count > 0)\n\n    local now = ngx_now() * 1000\n\n    -- just for testing\n    if type(fake_now) == \"number\" then\n        now = fake_now\n    end\n\n    local res, err = acquire_lock(self, key)\n    if not res then\n        return nil, err\n    end\n\n    local res, err = adjust(self, key, now)\n    if not res then\n        release_lock(self)\n        return nil, err\n    end\n\n    local last = res.last\n    local avail = res.avail\n\n    avail = avail - count\n    if avail >= 0 then\n        if commit then\n            update(self, key, avail, last)\n        end\n        release_lock(self)\n        return 0, avail\n    end\n\n    local quantum = self.quantum\n    local tick = floor((-avail + quantum - 1) / quantum)\n    local wait_time = tick * self.interval - (now - last)\n\n    local max_wait = self.max_wait\n    if type(max_wait) == \"number\" and wait_time > max_wait then\n        if commit then\n            update(self, key, avail + count, last)\n        end\n        release_lock(self)\n        return nil, \"rejected\"\n    end\n\n    if commit then\n        update(self, key, avail, last)\n    end\n    release_lock(self)\n\n    return wait_time / 1000, avail\nend\n\n\nfunction _M.take_available(self, key, count, fake_now)\n    if type(key) ~= \"string\" or count <= 0 then\n        return 0\n    end\n\n    local now = ngx_now() * 1000\n\n    -- just for testing\n    if type(fake_now) == \"number\" then\n        now = fake_now\n    end\n\n    local res, err = acquire_lock(self, key)\n    if not res then\n        return nil, err\n    end\n\n    local res, err = adjust(self, key, now)\n    if not res then\n        release_lock(self)\n        return nil, err\n    end\n\n    local last = res.last\n    local avail = res.avail\n\n    if avail <= 0 then\n        update(self, key, avail, last)\n        release_lock(self)\n        return 0\n    end\n\n    if count > avail then\n        count = avail\n    end\n\n    avail = avail - count\n    update(self, key, avail, last)\n    release_lock(self)\n\n    return count\nend\n\n\nfunction _M.incoming(self, key, commit)\n    return self:take(key, 1, commit)\nend\n\n\nfunction _M.uncommit(self, key)\n    assert(key)\n\n    local res, err = acquire_lock(self, key)\n    if not res then\n        return nil, err\n    end\n\n    local dict = self.dict\n\n    local v = dict:get(key)\n    if not v then\n        release_lock(self)\n        return nil, \"not found\"\n    end\n\n    if type(v) ~= \"string\" or #v ~= rec_size then\n        release_lock(self)\n        return nil, \"shdict abused by other users\"\n    end\n\n    local rec = ffi_cast(const_rec_ptr_type, v)\n    local avail = tonumber(rec.avail) + 1\n    if avail > self.capacity then\n        avail = self.capacity\n    end\n\n    update(self, key, avail, rec.last)\n    release_lock(self)\n\n    return true\nend\n\n\nreturn _M', '22c80a74348caed1575c237919f0bb32', '2022-04-02 13:38:11', '2022-04-02 13:38:11', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (34, 41, 'nginx.conf', 'DEFAULT_GROUP', '', 'worker_processes  2;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    include       seckill/*.conf;\n    default_type  application/json;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n    }\n\n}', '3ad42384eff480c7cb2ee3cee3b6e113', '2022-04-02 14:01:03', '2022-04-02 14:01:04', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 42, 'seckill.conf', 'DEFAULT_GROUP', '', 'lua_shared_dict my_limit_rate_store 100m;\nlua_shared_dict my_locks 100k;\n\nserver {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            access_by_lua_block {\n                local limit_rate = require \"resty.limit.rate\"\n                cjson = require \"cjson\"\n                \n                local result = {}\n                result[\'code\']= -200\n                result[\'time\']= os.date()\n                result[\'timestamp\']= os.time()\n                \n                -- 每100ms放入2个token，上限6000个。\n                local lim_global = limit_rate.new(\"my_limit_rate_store\", 100, 6000, 2, nil, {\n                    lock_enable = true,\n                    locks_shdict_name = \"my_locks\",\n                })\n\n                if not lim_global then\n                    ngx.log(ngx.ERR, \"操作异常，无法创建令牌桶: \", err)\n                    result[\'msg\']= \'操作异常，无法创建令牌桶\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                local t0, err = lim_global:take_available(\"__global__\", 1)\n                if not t0 then\n                    ngx.log(ngx.ERR, \"操作异常，无法获取token: \", err)\n                    result[\'msg\']= \'操作异常，无法获取token\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                if t0 == 0 then\n                    result[\'msg\']= \'操作繁忙，请稍后再试\'\n                    ngx.say(cjson.encode(result))\n                    return\n                end\n            }\n  \n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n}', '7e524d1cfe0aad97bc2c1bfa4bf2aecf', '2022-04-02 14:26:33', '2022-04-02 14:26:33', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (39, 43, 'seckill.conf', 'DEFAULT_GROUP', '', 'lua_shared_dict my_limit_rate_store 100m;\nlua_shared_dict my_locks 100k;\n\nserver {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            access_by_lua_block {\n                local limit_rate = require \"resty.limit.rate\"\n                cjson = require \"cjson\"\n                \n                local result = {}\n                result[\'code\']= -200\n                result[\'time\']= os.date()\n                result[\'timestamp\']= os.time()\n                \n                -- 每100ms放入2个token，上限6000个。\n                local lim_global = limit_rate.new(\"my_limit_rate_store\", 100, 6000, 2, nil, {\n                    lock_enable = true,\n                    locks_shdict_name = \"my_locks\",\n                })\n\n                if not lim_global then\n                    ngx.log(ngx.ERR, \"操作异常，无法创建令牌桶: \", err)\n                    result[\'msg\']= \'操作异常，无法创建令牌桶\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                local t0, err = lim_global:take_available(\"__global__\", 1)\n                if not t0 then\n                    ngx.log(ngx.ERR, \"操作异常，无法获取token: \", err)\n                    result[\'msg\']= \'操作异常，无法获取token\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                if t0 == 0 then\n                    result[\'msg\']= \'操作繁忙，请稍后再试\'\n                    ngx.say(cjson.encode(result))\n                    return\n                end\n            }\n  \n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n}', '7e524d1cfe0aad97bc2c1bfa4bf2aecf', '2022-04-02 14:38:38', '2022-04-02 14:38:39', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (39, 44, 'seckill.conf', 'DEFAULT_GROUP', '', 'server {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            access_by_lua_block {\n                lua_shared_dict my_limit_rate_store 100m;\n                lua_shared_dict my_locks 100k;\n                local limit_rate = require \"resty.limit.rate\"\n                cjson = require \"cjson\"\n                \n                local result = {}\n                result[\'code\']= -200\n                result[\'time\']= os.date()\n                result[\'timestamp\']= os.time()\n                \n                -- 每100ms放入2个token，上限6000个。\n                local lim_global = limit_rate.new(\"my_limit_rate_store\", 100, 6000, 2, nil, {\n                    lock_enable = true,\n                    locks_shdict_name = \"my_locks\",\n                })\n\n                if not lim_global then\n                    ngx.log(ngx.ERR, \"操作异常，无法创建令牌桶: \", err)\n                    result[\'msg\']= \'操作异常，无法创建令牌桶\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                local t0, err = lim_global:take_available(\"__global__\", 1)\n                if not t0 then\n                    ngx.log(ngx.ERR, \"操作异常，无法获取token: \", err)\n                    result[\'msg\']= \'操作异常，无法获取token\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                if t0 == 0 then\n                    result[\'msg\']= \'操作繁忙，请稍后再试\'\n                    ngx.say(cjson.encode(result))\n                    return\n                end\n            }\n  \n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n}', 'e7f8de36bd1f4f0f8ec1e5817f82a078', '2022-04-02 14:40:47', '2022-04-02 14:40:48', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (34, 45, 'nginx.conf', 'DEFAULT_GROUP', '', 'worker_processes  2;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    include       seckill/*.conf;\n    default_type  application/json;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n}', '23c63f74220a5d2f5f0f5667ee180436', '2022-04-02 14:44:34', '2022-04-02 14:44:34', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 46, 'goods-1', 'DEFAULT_GROUP', '', 'seckill-control:\n    goods-id: 1\n    finished: true\n    finish-time: 2022-04-03 14:26:46\n    storage: 0', '72cbf2826833ee9657d2e5ad167018ad', '2022-04-03 06:27:05', '2022-04-03 06:27:06', NULL, '172.17.0.1', 'I', 'seckill-control');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (43, 47, 'goods-1', 'DEFAULT_GROUP', '', 'seckill-control:\n    goods-id: 1\n    finished: true\n    finish-time: 2022-04-03 14:26:46\n    storage: 0', '72cbf2826833ee9657d2e5ad167018ad', '2022-04-03 06:32:17', '2022-04-03 06:32:17', 'nacos', '172.17.0.1', 'U', 'seckill-control');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (43, 48, 'goods-1', 'DEFAULT_GROUP', '', 'seckill-control:\n    goods-id: 1\n    finished: true\n    seckill-start-time: 2022-04-03 14:28:21\n    seckill-end-time: 2022-04-03 14:28:21\n    storage: 0', '54e37d5831802226958f20c4686bb171', '2022-04-03 06:34:36', '2022-04-03 06:34:37', 'nacos', '172.17.0.1', 'U', 'seckill-control');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 49, 'goods-1.yml', 'DEFAULT_GROUP', '', 'seckill-control:\n    goods-id: 1\n    finished: true\n    seckill-start-time: 2022-04-03 14:28:21\n    seckill-end-time: 2022-04-03 14:28:21\n    total-storage: 0', '0748adf3ffc433fa6c5fdda15e4e7a31', '2022-04-03 06:50:23', '2022-04-03 06:50:23', NULL, '172.17.0.1', 'I', 'seckill-control');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (43, 50, 'goods-1', 'DEFAULT_GROUP', '', 'seckill-control:\n    goods-id: 1\n    finished: true\n    seckill-start-time: 2022-04-03 14:28:21\n    seckill-end-time: 2022-04-03 14:28:21\n    total-storage: 0', '0748adf3ffc433fa6c5fdda15e4e7a31', '2022-04-03 06:50:27', '2022-04-03 06:50:27', NULL, '172.17.0.1', 'D', 'seckill-control');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (46, 51, 'goods-1.yml', 'DEFAULT_GROUP', '', 'seckill-control:\n    goods-id: 1\n    finished: true\n    seckill-start-time: 2022-04-03 14:28:21\n    seckill-end-time: 2022-04-03 14:28:21\n    total-storage: 0', '0748adf3ffc433fa6c5fdda15e4e7a31', '2022-04-03 06:59:07', '2022-04-03 06:59:07', NULL, '172.17.0.1', 'D', 'seckill-control');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (4, 52, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://10.61.20.211:33306/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: wssy001\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: rcde-producer', 'd1d9bd521a27a47054f05ffaee0978b5', '2022-04-04 07:43:37', '2022-04-04 07:43:38', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 53, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: ${waibao.db.username}\n    password: ${waibao.db.password}\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'a73c8d066640ce753a5ebf4221ae58a3', '2022-04-04 11:52:52', '2022-04-04 11:52:53', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 54, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_credit_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_payment?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_credit_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_payment?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: pay_id\n              algorithmExpression: payment_$->{pay_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-order-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-order-retailer:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\nlogging:\n  level:\n    root: info\n', '0b10ca27ff254b450865d41b972978ab', '2022-04-04 11:52:59', '2022-04-04 11:53:00', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (4, 55, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: ${waibao.db.username}\n    password: ${waibao.db.password}\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: rcde-producer', 'd10cdac978894602eb20d132cc7f95c4', '2022-04-04 11:53:22', '2022-04-04 11:53:22', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 56, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33306/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33306/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: pay_id\n              algorithmExpression: payment_$->{pay_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-order-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-order-retailer:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n', 'bd5a9eb4511bdf8b76d79b5da30d83db', '2022-04-04 11:53:42', '2022-04-04 11:53:42', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 57, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        userExtra:\n          actualDataNodes: master.user_extra\n        admin:\n          actualDataNodes: master.admin\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave', 'a4d2a6dbed95c4bb0cd3e0a286e9da51', '2022-04-05 00:21:31', '2022-04-05 00:21:31', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 58, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33306/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33306/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: pay_id\n              algorithmExpression: payment_$->{pay_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-order-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-order-retailer:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '9f7d9aa7743e7f0e6a033a3258502f4d', '2022-04-05 00:25:35', '2022-04-05 00:25:35', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 59, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: pay_id\n              algorithmExpression: payment_$->{pay_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '3e349199b49efec0166f48eaff0daeec', '2022-04-05 00:27:31', '2022-04-05 00:27:32', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 60, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: pay_id\n              algorithmExpression: payment_$->{pay_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', 'e13583e2204117bdd0080b28172505cd', '2022-04-05 01:37:09', '2022-04-05 01:37:09', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 61, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', 'dd7efe93556fb8c9972a3671751bda6b', '2022-04-05 01:39:46', '2022-04-05 01:39:47', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 62, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '21f373ac5e16ca2876e54ce1f08407e8', '2022-04-05 01:50:01', '2022-04-05 01:50:01', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 63, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n          logicTable: mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n          logicTable: user_credit\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          logicTable: payment\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', 'e38e2f22d3e31b293a36bbc366dfc70a', '2022-04-05 01:54:49', '2022-04-05 01:54:50', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 64, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n          logicTable: mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '5d4bfd75e8d8d288ca0bde18491c09ea', '2022-04-05 02:08:39', '2022-04-05 02:08:40', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 65, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      jdbc:\n        config:\n          props:\n            sql:\n              show: true\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n          logicTable: mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '92e83f0846fbbb439b186253ce1b7e80', '2022-04-05 02:17:23', '2022-04-05 02:17:23', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 66, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n          logicTable: mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer', '335e93a4f2a48bac4edeb9b995ee11a6', '2022-04-05 02:22:20', '2022-04-05 02:22:21', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 67, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer', '6ad38794de9d7b82da81a9451f480b22', '2022-04-05 02:32:40', '2022-04-05 02:32:40', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 68, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer', '6ad38794de9d7b82da81a9451f480b22', '2022-04-05 02:37:25', '2022-04-05 02:37:25', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (2, 69, 'waibao-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        user_extra:\n          actualDataNodes: master.user_extra\n        admin:\n          actualDataNodes: master.admin\n        user:\n          actualDataNodes: master.user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: user_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave', '47a4293c678066e3310f70c72b30889a', '2022-04-05 02:45:42', '2022-04-05 02:45:42', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 70, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        log_user_credit:\n          actualDataNodes: master-credit-user.log_user_credit\n        log_payment:\n          actualDataNodes: master-payment.log_payment\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        user_credit:\n          actualDataNodes: master-credit-user.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        payment:\n          actualDataNodes: master-payment.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-credit-user:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master-payment:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer', 'bc308feaa0019d4496f198b1ca6decb5', '2022-04-05 05:06:51', '2022-04-05 05:06:51', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (6, 71, 'waibao-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-order-user,master-order-retailer,slave-order-user,slave-order-retailer\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_v2?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      master-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33306/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n      slave-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://10.61.20.211:33307/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: root\n        password: wssy001\n\n    sharding:\n      tables:\n        admin:\n          actualDataNodes: master.admin\n        mq_msg_compensation:\n          actualDataNodes: master.mq_msg_compensation\n        log_order_goods:\n          actualDataNodes: master.log_order_goods\n        seckill_goods:\n          actualDataNodes: master.seckill_goods\n        order_user:\n          actualDataNodes: master-order-user.order_user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: order_user_$->{user_id % 2}\n        order_retailer:\n          actualDataNodes: master-order-retailer.order_retailer_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: retailer_id\n              algorithmExpression: order_retailer_$->{retailer_id % 2}\n\n      master-slave-rules:\n        master:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master-order-user:\n          master-data-source-name: master-order-user\n          SlaveDataSourceNames: slave-order-user\n        master-order-retailer:\n          master-data-source-name: master-order-retailer\n          SlaveDataSourceNames: slave-order-retailer\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\nrocketmq:\n  name-server: 10.61.20.211:39876\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n', 'e0081f263be1f0d374dc47550f91f63f', '2022-04-05 11:57:12', '2022-04-05 11:57:12', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (4, 72, 'waibao-rcde.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: ${waibao.db.username}\n    password: ${waibao.db.password}\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 4\n        keep-alive: 60s\n        core-size: 2\n        queue-capacity: 2000\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 4\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: rcde-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true', '8c24e82950c33dbea08050c9cf2088b3', '2022-04-06 10:01:36', '2022-04-06 10:01:37', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1, 73, 'application.yml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    host: 10.61.20.211\n    password: wssy001\n    timeout: 1000\n    lettuce:\n      pool:\n        min-idle: 5\n        max-idle: 10\n\nwaibao:\n  db:\n    ip: 10.61.20.211\n    port: 33306\n    username: root\n    password: wssy001\n\n  rocketmq:\n    ip: 10.61.20.211\n    port: 39876', '27b8dcde87fb5664436b9fcb4e232b08', '2022-04-06 10:02:19', '2022-04-06 10:02:19', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (5, 74, 'waibao-payment.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-credit-user,master-payment,slave-credit-user,slave-payment\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-credit-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_credit_user?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-payment:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_payment?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master1.mq_msg_compensation\n        log_user_credit:\n          actualDataNodes: master2.log_user_credit\n        user_credit:\n          actualDataNodes: master2.user_credit_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: user_credit_$->{user_id % 2}\n        log_payment:\n          actualDataNodes: master3.log_payment\n        payment:\n          actualDataNodes: master3.payment_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: id\n              algorithmExpression: payment_$->{id % 2}\n          keyGenerator:\n            column: id\n            type: SNOWFLAKE\n\n      master-slave-rules:\n        master1:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master2:\n          master-data-source-name: master-credit-user\n          SlaveDataSourceNames: slave-credit-user\n        master3:\n          master-data-source-name: master-payment\n          SlaveDataSourceNames: slave-payment\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: payment-producer', '0f2b5cd1c30e784be2565d333c4d7440', '2022-04-06 10:02:39', '2022-04-06 10:02:40', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (6, 75, 'waibao-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  shardingsphere:\n    datasource:\n      names: master,slave,master-order-user,master-order-retailer,slave-order-user,slave-order-retailer\n      master:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      master-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-order-user:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_order_user?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n      slave-order-retailer:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://${waibao.db.ip}:33307/waibao_order_retailer?useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true\n        username: ${waibao.db.username}\n        password: ${waibao.db.password}\n\n    sharding:\n      tables:\n        mq_msg_compensation:\n          actualDataNodes: master1.mq_msg_compensation\n        log_order_goods:\n          actualDataNodes: master1.log_order_goods\n        order_user:\n          actualDataNodes: master2.order_user_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: user_id\n              algorithmExpression: order_user_$->{user_id % 2}\n        order_retailer:\n          actualDataNodes: master3.order_retailer_$->{0..1}\n          tableStrategy:\n            inline:\n              shardingColumn: retailer_id\n              algorithmExpression: order_retailer_$->{retailer_id % 2}\n\n      master-slave-rules:\n        master1:\n          master-data-source-name: master\n          SlaveDataSourceNames: slave\n        master2:\n          master-data-source-name: master-order-user\n          SlaveDataSourceNames: slave-order-user\n        master3:\n          master-data-source-name: master-order-retailer\n          SlaveDataSourceNames: slave-order-retailer\n\n  task:\n    execution:\n      pool:\n        max-size: 16\n        keep-alive: \"10s\"\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n  producer:\n    group: order-producer\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n', '0855ad260ff67fc1140ae5158e894a9c', '2022-04-06 10:02:56', '2022-04-06 10:02:56', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (7, 76, 'waibao-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  datasource:\n    url: jdbc:mysql://${waibao.db.ip}:${waibao.db.port}/waibao_v2?useUnicode=true&useSSL=false&autoReconnect=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: ${waibao.db.username}\n    password: ${waibao.db.password}\n    hikari:\n      max-lifetime: 28770000\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 28770000\n\n  task:\n    execution:\n      pool:\n        max-size: 20\n        keep-alive: 60s\n        core-size: 10\n        queue-capacity: 200\n      thread-name-prefix: 异步任务-\n    scheduling:\n      pool:\n        size: 5\n      thread-name-prefix: 定时任务-\n\nrocketmq:\n  name-server: ${waibao.rocketmq.ip}:${waibao.rocketmq.port}\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: enable\n      logic-delete-value: false\n      logic-not-delete-value: true\n\naj:\n  captcha:\n    cache-type: redis\n    interference-options: 2\n    type: blockpuzzle', 'acbb4af94f3f7320ba2f94ce4a953431', '2022-04-06 10:03:16', '2022-04-06 10:03:16', 'nacos', '172.17.0.1', 'U', 'waibao');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (34, 77, 'nginx.conf', 'DEFAULT_GROUP', '', 'worker_processes  2;\nerror_log logs/error.log;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    include       seckill/*.conf;\n    default_type  application/json;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n}', '27b25b50fea8bc4f550c0fed0502a794', '2022-04-06 11:04:42', '2022-04-06 11:04:42', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 78, 'rcde.conf', 'DEFAULT_GROUP', '', 'location /rcde/request/check/ {\n    content_by_lua_file lua/check-risk-user.lua;\n\n    proxy_redirect                      off;\n    proxy_read_timeout                  600;\n    proxy_send_timeout                  600;\n    proxy_connect_timeout               60;\n    proxy_set_header Host               $host;\n    proxy_set_header X-Real-IP          $remote_addr;\n    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;\n\n}', 'b4f2ce711ea41db47863abf090e23c32', '2022-04-06 11:05:25', '2022-04-06 11:05:26', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (39, 79, 'seckill.conf', 'DEFAULT_GROUP', '', 'lua_shared_dict my_limit_rate_store 100m;\nlua_shared_dict my_locks 100k;\n\nserver {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            access_by_lua_block {\n                local limit_rate = require \"resty.limit.rate\"\n                cjson = require \"cjson\"\n                \n                local result = {}\n                result[\'code\']= -200\n                result[\'time\']= os.date()\n                result[\'timestamp\']= os.time()\n                \n                -- 每100ms放入2个token，上限6000个。\n                local lim_global = limit_rate.new(\"my_limit_rate_store\", 100, 6000, 2, nil, {\n                    lock_enable = true,\n                    locks_shdict_name = \"my_locks\",\n                })\n\n                if not lim_global then\n                    ngx.log(ngx.ERR, \"操作异常，无法创建令牌桶: \", err)\n                    result[\'msg\']= \'操作异常，无法创建令牌桶\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                local t0, err = lim_global:take_available(\"__global__\", 1)\n                if not t0 then\n                    ngx.log(ngx.ERR, \"操作异常，无法获取token: \", err)\n                    result[\'msg\']= \'操作异常，无法获取token\'\n                    ngx.say(cjson.encode(result))\n                    return ngx.exit(500)\n                end\n\n                if t0 == 0 then\n                    result[\'msg\']= \'操作繁忙，请稍后再试\'\n                    ngx.say(cjson.encode(result))\n                    return\n                end\n            }\n  \n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n}', '7e524d1cfe0aad97bc2c1bfa4bf2aecf', '2022-04-06 11:05:50', '2022-04-06 11:05:51', 'nacos', '172.17.0.1', 'U', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (37, 80, 'rate.lua', 'DEFAULT_GROUP', '', '-- 请将此文件放入\"lualib/resty/limit/\"下\n-- Copyright (C) UPYUN, Inc.\n\n-- limit request rate using the token bucket method:\n--    https://en.wikipedia.org/wiki/Token_bucket\n\n\nlocal ffi = require \"ffi\"\nlocal math = require \"math\"\nlocal lock = require \"resty.lock\"\n\n\nlocal ffi_cast = ffi.cast\nlocal ffi_str = ffi.string\n\nlocal type = type\nlocal assert = assert\nlocal ngx_now = ngx.now\nlocal floor = math.floor\nlocal ngx_shared = ngx.shared\nlocal setmetatable = setmetatable\n\n\nffi.cdef[[\n    struct lua_resty_limit_rate_rec {\n        int64_t        avail;\n        uint64_t       last;  /* time in milliseconds */\n    };\n]]\nlocal const_rec_ptr_type = ffi.typeof(\"const struct lua_resty_limit_rate_rec*\")\nlocal rec_size = ffi.sizeof(\"struct lua_resty_limit_rate_rec\")\n\nlocal rec_cdata = ffi.new(\"struct lua_resty_limit_rate_rec\")\n\n\nlocal _M = {\n    _VERSION = \"0.1\",\n}\n\n\nlocal mt = {\n    __index = _M\n}\n\n\nlocal function acquire_lock(self, key)\n    if not self.lock_enable then\n        return true\n    end\n\n    local lock, err = lock:new(self.locks_shdict_name)\n    if not lock then\n        return nil, err\n    end\n\n    self.lock = lock\n\n    return lock:lock(key)\nend\n\n\nlocal function release_lock(self)\n    if not self.lock_enable then\n        return true\n    end\n\n    local lock = self.lock\n\n    return lock:unlock()\nend\n\n\nlocal function update(self, key, avail, last)\n    local dict = self.dict\n\n    rec_cdata.avail = avail\n    rec_cdata.last = last\n    dict:set(key, ffi_str(rec_cdata, rec_size))\n\n    -- ngx.log(ngx.ERR, \"key = \", key, \" avail = \", avail, \" last = \", last)\nend\n\n\nlocal function adjust(self, key, now)\n    local dict = self.dict\n\n    local res = {\n        last = now,\n        avail = self.capacity\n    }\n\n    local v = dict:get(key)\n    if v then\n        if type(v) ~= \"string\" or #v ~= rec_size then\n            return nil, \"shdict abused by other users\"\n        end\n\n        local rec = ffi_cast(const_rec_ptr_type, v)\n\n        res.last = tonumber(rec.last)\n        res.avail = tonumber(rec.avail)\n    end\n\n    local tick = floor((now - res.last) / self.interval)\n    res.last = res.last + tick * self.interval\n\n    if res.avail >= self.capacity then\n        return res\n    end\n\n    res.avail = res.avail + tick * self.quantum\n    if res.avail > self.capacity then\n        res.avail = self.capacity\n    end\n\n    return res\nend\n\n\nfunction _M.new(dict_name, interval, capacity, quantum, max_wait, opts)\n    local dict = ngx_shared[dict_name]\n    if not dict then\n        return nil, \"shared dict not found\"\n    end\n\n    if not quantum then\n        quantum = 1\n    end\n\n    assert(interval > 0 and capacity >= 0 and quantum > 0)\n\n    if not opts then\n        opts = {}\n    end\n\n    local lock_enable = opts.lock_enable or false\n    local locks_shdict_name = opts.locks_shdict_name or \"locks\"\n\n    local self = {\n        dict = dict,\n        interval = interval,\n        capacity = capacity,\n        quantum = quantum,\n        max_wait = max_wait,\n\n        lock_enable = lock_enable,\n        locks_shdict_name = locks_shdict_name,\n    }\n\n    return setmetatable(self, mt)\nend\n\n\nfunction _M.set_max_wait(self, max_wait)\n    self.max_wait = max_wait\nend\n\n\nfunction _M.take(self, key, count, commit, fake_now)\n    assert(key and count > 0)\n\n    local now = ngx_now() * 1000\n\n    -- just for testing\n    if type(fake_now) == \"number\" then\n        now = fake_now\n    end\n\n    local res, err = acquire_lock(self, key)\n    if not res then\n        return nil, err\n    end\n\n    local res, err = adjust(self, key, now)\n    if not res then\n        release_lock(self)\n        return nil, err\n    end\n\n    local last = res.last\n    local avail = res.avail\n\n    avail = avail - count\n    if avail >= 0 then\n        if commit then\n            update(self, key, avail, last)\n        end\n        release_lock(self)\n        return 0, avail\n    end\n\n    local quantum = self.quantum\n    local tick = floor((-avail + quantum - 1) / quantum)\n    local wait_time = tick * self.interval - (now - last)\n\n    local max_wait = self.max_wait\n    if type(max_wait) == \"number\" and wait_time > max_wait then\n        if commit then\n            update(self, key, avail + count, last)\n        end\n        release_lock(self)\n        return nil, \"rejected\"\n    end\n\n    if commit then\n        update(self, key, avail, last)\n    end\n    release_lock(self)\n\n    return wait_time / 1000, avail\nend\n\n\nfunction _M.take_available(self, key, count, fake_now)\n    if type(key) ~= \"string\" or count <= 0 then\n        return 0\n    end\n\n    local now = ngx_now() * 1000\n\n    -- just for testing\n    if type(fake_now) == \"number\" then\n        now = fake_now\n    end\n\n    local res, err = acquire_lock(self, key)\n    if not res then\n        return nil, err\n    end\n\n    local res, err = adjust(self, key, now)\n    if not res then\n        release_lock(self)\n        return nil, err\n    end\n\n    local last = res.last\n    local avail = res.avail\n\n    if avail <= 0 then\n        update(self, key, avail, last)\n        release_lock(self)\n        return 0\n    end\n\n    if count > avail then\n        count = avail\n    end\n\n    avail = avail - count\n    update(self, key, avail, last)\n    release_lock(self)\n\n    return count\nend\n\n\nfunction _M.incoming(self, key, commit)\n    return self:take(key, 1, commit)\nend\n\n\nfunction _M.uncommit(self, key)\n    assert(key)\n\n    local res, err = acquire_lock(self, key)\n    if not res then\n        return nil, err\n    end\n\n    local dict = self.dict\n\n    local v = dict:get(key)\n    if not v then\n        release_lock(self)\n        return nil, \"not found\"\n    end\n\n    if type(v) ~= \"string\" or #v ~= rec_size then\n        release_lock(self)\n        return nil, \"shdict abused by other users\"\n    end\n\n    local rec = ffi_cast(const_rec_ptr_type, v)\n    local avail = tonumber(rec.avail) + 1\n    if avail > self.capacity then\n        avail = self.capacity\n    end\n\n    update(self, key, avail, rec.last)\n    release_lock(self)\n\n    return true\nend\n\n\nreturn _M', '22c80a74348caed1575c237919f0bb32', '2022-04-06 11:06:12', '2022-04-06 11:06:13', NULL, '172.17.0.1', 'D', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 81, 'check-risk-user.lua', 'DEFAULT_GROUP', '', 'local mysqldb = require \"resty.mysql\"\nlocal times\nmysql , err = mysqldb:new()\nif not mysql then\n    ngx.log(ngx.ERR , \"mysql初始化失败:\" , err)\nend\n\nmysql:set_timeout(1000)\ntimes , err = mysql:get_reused_times()\n\nif not times or times == 0 then\n    ok , err , errcode , sqlstate = mysql:connect {\n        host = \"10.61.20.211\",\n        port = 33306,\n        database = \"waibao_v2\",\n        user = \"root\",\n        password = \"wssy001\",\n        charset = \"utf8\",\n        max_packet_size = 1024 * 1024,\n    }\n\n    if err then\n        ngx.log(ngx.ERR , \"mysql连接失败:\" , err)\n    end\n\n    if ok then\n        ngx.say(cjson.encode(ok))\n    end\n\nend\n\nlocal result = table.new(0 , 4)\nresult[\'time\'] = ngx.localtime()\nresult[\'timestamp\'] = ngx.time()\n\nngx.req.read_body()\nlocal bodyJson = ngx.req.get_body_data()\nbodyJson = string.gsub(bodyJson , \'(\"userId\":)(%s*)(%d+)\' , \'%1\"%3\"\')\nlocal riskUserVO = cjson.decode(bodyJson)\n--goodsId\n--userId\n\nlocal redisKey = table.new(2 , 0)\nredisKey[1] = \'risk-user-\'\nredisKey[2] = tostring(riskUserVO[\'goodsId\'])\nlocal temp = table.concat(redisKey , \'\')\n\nfunction checkRiskUser(bodyJson)\n    return redis:eval([[\n        local riskUserVO = cjson.decode(ARGV[1])\n        redis.call(\'SELECT\' , 15)\n        return tonumber(redis.call(\'SISMEMBER\' , KEYS[1] .. riskUserVO[\"goodsId\"] , riskUserVO[\"userId\"])) == 1\n    ]] , 1 , \'risk-user-\' , bodyJson)\nend\n\nfunction addRiskUser()\n    return redis:eval([[\n        local riskUserVO = cjson.decode(ARGV[1])\n        redis.call(\'SELECT\' , 15)\n        redis.call(\'SISMEMBER\' , KEYS[1] .. riskUserVO[\"goodsId\"] , riskUserVO[\"userId\"])\n    ]] , 1 , \'risk-user-\' , bodyJson)\nend\n\nfunction checkRiskUserFromBloomFilter(goodsId , userId)\n    local checkBloomFilterScript = [[\n        local entries = ARGV[2]\n        local precision = ARGV[3]\n        local count = redis.call(\'GET\' , ARGV[1] .. \':count\')\n\n        if not count then\n            return 0\n        end\n\n        local factor = math.ceil((entries + count) / entries)\n        local index = math.ceil(math.log(factor) / 0.69314718055995)\n        local scale = math.pow(2 , index - 1) * entries\n\n        local hash = redis.sha1hex(ARGV[4])\n\n        local h = { }\n        h[0] = tonumber(string.sub(hash , 1 , 8) , 16)\n        h[1] = tonumber(string.sub(hash , 9 , 16) , 16)\n        h[2] = tonumber(string.sub(hash , 17 , 24) , 16)\n        h[3] = tonumber(string.sub(hash , 25 , 32) , 16)\n\n        local maxbits = math.floor((scale * math.log(precision * math.pow(0.5 , index))) / -0.4804530139182)\n\n        local maxk = math.floor(0.69314718055995 * maxbits / scale)\n        local b = { }\n\n        for i = 1 , maxk do\n            table.insert(b , h[i % 2] + i * h[2 + (((i + (i % 2)) % 4) / 2)])\n        end\n\n        for n = 1 , index do\n            local key = ARGV[1] .. \':\' .. n\n            local found = true\n            local scalen = math.pow(2 , n - 1) * entries\n\n            local bits = math.floor((scalen * math.log(precision * math.pow(0.5 , n))) / -0.4804530139182)\n\n            local k = math.floor(0.69314718055995 * bits / scalen)\n\n            for i = 1 , k do\n                if redis.call(\'GETBIT\' , key , b[i] % bits) == 0 then\n                    found = false\n                    break\n                end\n            end\n\n            if found then\n                return true\n            end\n        end\n\n        return false\n    ]]\n\n    return redis:eval(checkBloomFilterScript , 0 , \'bloom-filter-risk-user\' , 100000 , 0.001 , goodsId .. userId)\nend\n\nfunction addToBloomFilter(goodsId , userId)\n    local addToBloomFilterScript = [[\n        local entries = ARGV[2]\n        local precision = ARGV[3]\n        local hash = redis.sha1hex(ARGV[4])\n        local countkey = ARGV[1] .. \':count\'\n        local count = redis.call(\'GET\' , countkey)\n        if not count then\n            count = 1\n        else\n            count = count + 1\n        end\n\n        local factor = math.ceil((entries + count) / entries)\n        local index = math.ceil(math.log(factor) / 0.69314718055995)\n        local scale = math.pow(2 , index - 1) * entries\n        local key = ARGV[1] .. \':\' .. index\n\n        local bits = math.floor(-(scale * math.log(precision * math.pow(0.5 , index))) / 0.4804530139182)\n\n        local k = math.floor(0.69314718055995 * bits / scale)\n\n        local h = { }\n        h[0] = tonumber(string.sub(hash , 1 , 8) , 16)\n        h[1] = tonumber(string.sub(hash , 9 , 16) , 16)\n        h[2] = tonumber(string.sub(hash , 17 , 24) , 16)\n        h[3] = tonumber(string.sub(hash , 25 , 32) , 16)\n\n        local found = true\n        for i = 1 , k do\n            if redis.call(\'SETBIT\' , key , (h[i % 2] + i * h[2 + (((i + (i % 2)) % 4) / 2)]) % bits , 1) == 0 then\n                found = false\n            end\n        end\n\n        if found == false then\n            -- INCR is a little bit faster than SET.\n            redis.call(\'INCR\' , countkey)\n        end\n    ]]\n\n    return redis:eval(addToBloomFilterScript , 0 , \'bloom-filter-risk-user\' , 100000 , 0.001 , goodsId .. userId)\nend\n\nfunction byte2bin(n)\n    local t = {}\n    for i = 7 , 0 , -1 do\n        t[#t + 1] = math.floor(n / 2 ^ i)\n        n = n % 2 ^ i\n    end\n    return t\nend\n\nfunction checkRiskUserFromMysql()\n    res , err , errcode , sqlstate = mysql:query([[\n        select goods_id,\n        rule_code\n        from rule\n        where goods_id =\n    ]] .. redisKey[2])\n\n    if err then\n        ngx.log(ngx.ERR , \"mysql查询rule失败:\" , err)\n        result[\'code\'] = -200\n        result[\'msg\'] = \'请求失败\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    if not res then\n        ngx.log(ngx.NOTICE , \"mysql查询rule失败，rule不存在\")\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    local ruleCodeArray = byte2bin(tonumber(res[1][\'rule_code\']))\n    local userExtra\n    local rule\n    local deposit\n    if ruleCodeArray[8] == 1 or ruleCodeArray[7] == 1 or ruleCodeArray[6] == 1 then\n\n        local tempSql = \'select user_id, defaulter, age, work_status from user_extra where user_id = \'\n        tempSql = tempSql .. riskUserVO[\'userId\'] .. \';\'\n        res , err , errcode , sqlstate = mysql:query(tempSql)\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询user_extra失败:\" , err)\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        userExtra = res[1]\n    end\n\n    --客户年龄\n    if ruleCodeArray[8] == 1 then\n        res , err , errcode , sqlstate = mysql:query([[\n        select count(id)\n        from rule]] .. \' where goods_id = \' .. riskUserVO[\'goodsId\'] .. \' and deny_age_below <= \' .. tonumber(userExtra[\'age\']))\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询客户年龄失败:\" , err , \'userId：\' , riskUserVO[\'userId\'])\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        if tonumber(res[1][\'count(id)\']) == 0 then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    --失信人名单\n    if ruleCodeArray[7] == 1 then\n        if tonumber(userExtra[\'defaulter\']) == 1 then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    --工作状态异常\n    if ruleCodeArray[6] == 1 then\n        res , err , errcode , sqlstate = mysql:query([[\n        select count(id)\n        from rule]] .. \' where goods_id = \' .. tonumber(riskUserVO[\'goodsId\']) .. \'and deny_work_status =\' .. userExtra[\'work_status\'])\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询客户年龄失败:\" , err , \'userId：\' , riskUserVO[\'userId\'])\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        if tonumber(res[1][\'count(id)\']) == 1 then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\n\n    --逾期记录\n    if ruleCodeArray[5] == 1 then\n        res , err , errcode , sqlstate = mysql:query([[\n        select allow_overdue_delayed_days,\n        deny_overdue_times\n        collect_years,\n        ignore_overdue_amount\n        from rule\n        where goods_id =\n        ]] .. tonumber(riskUserVO[\'goodsId\']))\n\n        rule = res[1]\n\n        local ignoreAmount = tonumber(rule[\'ignore_overdue_amount\'])\n        local now = ngx.today()\n        local year = tonumber(string.sub(now , 1 , 4)) - tonumber(rule[\'collect_years\'])\n        local month = string.sub(now , 5 , 7)\n        local day = tonumber(string.sub(now , 8 , 10))\n\n        res , err , errcode , sqlstate = mysql:query(\'select count(id) from deposit where user_id =\'\n                .. riskUserVO[\'userId\'] .. \'and debt_amount > \' .. ignoreAmount ..\n                \'and due_date >= \\\'\' .. year .. month .. day .. \'\\\'\')\n\n        if err then\n            ngx.log(ngx.ERR , \"mysql查询deposit失败:\" , err)\n            result[\'code\'] = -200\n            result[\'msg\'] = \'请求失败\'\n            ngx.say(cjson.encode(result))\n            return ngx.exit(200)\n        end\n\n        if tonumber(res[1][\'count(id)\']) >= tonumber(rule[\'deny_overdue_times\']) then\n            riskUserCache:set(temp , nil , true)\n            addToBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\'])\n        end\n        result[\'code\'] = 200\n        result[\'msg\'] = \'请求成功\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n\n    end\nend\n\nres , err = goodsCache:get(temp , nil , checkRiskUser , bodyJson)\nif err then\n    ngx.log(ngx.ERR , \"mysql连接失败:\" , err)\nend\n\nif res or not checkRiskUserFromBloomFilter(riskUserVO[\'goodsId\'] , riskUserVO[\'userId\']) then\n    result[\'code\'] = 200\n    result[\'msg\'] = \'请求已提交\'\n    ngx.say(cjson.encode(result))\n    return ngx.exit(200)\nend\n\ncheckRiskUserFromMysql()\n\nok , err = mysql:set_keepalive(60000 , 100)\nif not ok then\n    ngx.log(ngx.ERR , \"mysql keepalive失败: \" , err)\nend\n\nresult[\'code\'] = 200\nresult[\'msg\'] = \'请求成功\'\nngx.say(cjson.encode(result))\nreturn ngx.exit(200)', '75f9c5ba6ce7eb7ee77a8d73dfae5228', '2022-04-06 11:06:37', '2022-04-06 11:06:37', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 82, 'init.lua', 'DEFAULT_GROUP', '', 'cjson = require(\"cjson\")\n\nlocal redis_util = require \"resty.redis-util\"\nredis = redis_util:new({\n    host = \'10.61.20.211\',\n    port = 6379,\n    db_index = 0,\n    password = \'wssy001\',\n    timeout = 1000,\n    keepalive = 60000,\n    pool_size = 100\n});\n\nlocal mlcache = require \"resty.mlcache\"\ngoodsCache , err = mlcache.new(\"mycache\" , \"goodsDict\" , {\n    lru_size = 3000,\n    ttl = 3,\n    neg_ttl = 3,\n    ipc_shm = \"ipc_shared_dict1\"\n})\n\nif not goodsCache then\n    ngx.log(ngx.ERR , \"goodsCache初始化失败:\" , err)\nend\n\nriskUserCache , err = mlcache.new(\"mycache2\" , \"riskUserDict\" , {\n    lru_size = 3000,\n    ttl = 3600,\n    neg_ttl = 10,\n    ipc_shm = \"ipc_shared_dict2\"\n})\n\nif not riskUserCache then\n    ngx.log(ngx.ERR , \"riskUserCache初始化失败:\" , err)\nend\n', 'dd65acd21554b5cf1b281f7bca370ee6', '2022-04-06 11:07:02', '2022-04-06 11:07:03', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 83, 'limit.lua', 'DEFAULT_GROUP', '', 'local arg = ngx.req.get_uri_args()\n\nlocal result = table.new(0 , 4)\nresult[\'code\'] = -200\nresult[\'time\'] = ngx.localtime()\nresult[\'timestamp\'] = ngx.time()\n\nlocal redisKey = table.new(2 , 0)\nredisKey[1] = \'seckill-goods\'\nredisKey[2] = tostring(arg[\'goodsId\'])\nlocal temp = table.concat(redisKey , \'-\')\n\nfunction checkSeckillFinished()\n    return redis:eval([[\n        redis.call(\'SELECT\' , 5)\n        local key = KEYS[1]\n        local goodsId = tostring(ARGV[1])\n        return redis.call(\'HGET\' , key , goodsId)\n    ]] , 1 , \'seckill-goods-status\' , redisKey[2])\nend\n\nfunction checkGoodsStorage()\n    return redis:eval([[\n        redis.call(\'SELECT\' , 5)\n        local key = KEYS[1]\n        local field = tostring(ARGV[1])\n        return redis.call(\'HGET\' , key , field)\n    ]] , 1 , temp , \'storage\')\nend\n\nlocal res , err = goodsCache:get(redisKey[2] , nil , checkSeckillFinished , temp)\n\nif err or res == nil then\n    if err then\n        ngx.log(ngx.ERR , \"获取商品状态失败：\" , err)\n    else\n        ngx.log(ngx.ERR , \"获取商品状态失败，状态不存在\")\n    end\n    return\nend\n\nif not res then\n    result[\'msg\'] = \'秒杀已结束\'\n    ngx.say(cjson.encode(result))\n    return ngx.exit(200)\nelse\n    ngx.log(ngx.NOTICE , \"获取商品状态成功，goodsId：\" , redisKey[2] , \'，状态：\' , res)\nend\n\nres , err = checkGoodsStorage()\nif err or not res then\n    if err then\n        ngx.log(ngx.ERR , \"获取商品库存失败：\" , err)\n        return\n    end\n    ngx.log(ngx.ERR , \"获取商品库存失败，库存不存在\")\n    return\nelse\n    ngx.log(ngx.NOTICE , \"获取商品库存成功，goodsId：\" , redisKey[2] , \'，库存：\' , res)\n    if tonumber(res) <= 0 then\n        result[\'msg\'] = \'秒杀已结束\'\n        ngx.say(cjson.encode(result))\n        return ngx.exit(200)\n    end\nend', '7c2c4bdab4ff71f3aa95eb7cad01e000', '2022-04-06 11:07:26', '2022-04-06 11:07:26', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 84, 'redis-util.lua', 'DEFAULT_GROUP', '', '-- Copyright (C) Anjia (anjia0532)\n\nlocal redis_c = require(\"resty.redis\")\n\nlocal ok, new_tab = pcall(require, \"table.new\")\nif not ok or type(new_tab) ~= \"function\" then\n    new_tab = function (narr, nrec) return {} end\nend\n\nlocal _M = new_tab(0, 54)\n\n_M._VERSION = \'0.07\'\n\nlocal mt = {__index = _M}\n\n\nlocal ngx_log               = ngx.log\nlocal debug                 = ngx.config.debug\n\nlocal DEBUG                 = ngx.DEBUG\nlocal CRIT                  = ngx.CRIT\n\nlocal MAX_PORT              = 65535\n\n\nlocal host                  = \'127.0.0.1\'\nlocal port                  = 6379\nlocal db_index              = 0\nlocal password              = nil\nlocal keepalive             = 60000 --60s\nlocal pool_size             = 100\nlocal timeout             = 3000 --3s   --modify by hirryli\n\n\n-- if res is ngx.null or nil or type(res) is table and all value is ngx.null return true else false\nlocal function _is_null(res)\n  if res == ngx.null or res ==nil then\n    return true\n  elseif type(res) == \"table\" then\n    for _, v in pairs(res) do\n      if v ~= ngx.null then\n        return false\n      end\n    end\n    -- thanks for https://github.com/anjia0532/lua-resty-redis-util/issues/3\n    return true \n  end\n  return false\nend\n\n\nlocal function _debug_err(msg,err)\n  if debug then\n    ngx_log(DEBUG, msg ,err)\n  end\nend\n\n-- encapsulation redis connect\nlocal function _connect_mod(self,redis)\n  -- set timeout -- add by hirryli \n  -- ngx.say(\"timeout:\", timeout)\n  if timeout then    \n    redis:set_timeout(timeout)\n  else\n    redis:set_timeout(3000)\n  end\n\n  local ok, err\n  -- set redis unix socket\n  if host:find(\"unix:/\", 1, true) == 1 then\n    ok, err = redis:connect(host)\n  -- set redis host,port\n  else\n    ok, err = redis:connect(host, port)\n  end\n  if not ok or err then\n  \n    _debug_err(\"previous connection not finished,reason::\",err)\n    \n    return nil, err\n  end\n  \n  -- set auth\n  if password then\n    local times, err = redis:get_reused_times()\n    \n    if times == 0 then\n    \n      local ok, err = redis:auth(password)\n      if not ok or err then\n        _debug_err(\"failed to set redis password,reason::\",err)\n        return nil, err\n      end\n    elseif err then\n      _debug_err( \"failed to get this connect reused times,reason::\",err)\n      return nil, err\n    end\n  end\n  \n  if db_index >0 then \n    local ok, err = redis:select(db_index)\n      if not ok or err then\n        _debug_err( \"failed to select redis databse index to\" , db_index , \",reason::\",err)\n        return nil, err\n      end\n  end\n  \n  return redis, nil\nend\n\n\nlocal function _init_connect()\n  -- init redis\n  local redis, err = redis_c:new()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  -- get connect\n  local ok, err = _connect_mod(self,redis)\n  if not ok or err then\n    _debug_err( \"failed to create redis connection,reason::\",err)\n    return nil, err\n  end\n  return redis,nil\nend\n\n-- put it into the connection pool of size (default 100), with max idle time (default 60s)\nlocal function _set_keepalive_mod(self,redis )\n  return redis:set_keepalive(keepalive, pool_size)\nend\n\n-- encapsulation subscribe\nfunction _M.subscribe( self, channel )\n\n  -- init redis\n  local redis, err = _init_connect()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  -- sub channel\n  local res, err = redis:subscribe(channel)\n  if not res then\n    _debug_err(\"failed to subscribe channel,reason:\",err)\n    return nil, err\n  end\n\n  local function do_read_func ( do_read )\n    if do_read == nil or do_read == true then\n      res, err = redis:read_reply()\n      if not res then\n        _debug_err(\"failed to read subscribe channel reply,reason:\",err)\n        return nil, err\n      end\n      return res\n    end\n    \n    -- if do_read is false \n    redis:unsubscribe(channel)\n    _set_keepalive_mod(self,redis)\n    return\n  end\n\n  return do_read_func\nend\n\n-- init pipeline,default cmds num is 4\nfunction _M.init_pipeline(self, n)\n  self._reqs = new_tab(n or 4, 0)\nend\n\n-- cancel pipeline\nfunction _M.cancel_pipeline(self)\n  self._reqs = nil\nend\n\n-- commit pipeline\nfunction _M.commit_pipeline(self)\n  -- get cache cmds\n  local _reqs = rawget(self, \"_reqs\") \n  if not _reqs then\n    _debug_err(\"failed to commit pipeline,reason:no pipeline\")\n    return nil, \"no pipeline\"\n  end\n\n  self._reqs = nil\n\n  -- init redis\n  local redis, err = _init_connect()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  redis:init_pipeline()\n  \n   --redis command like set/get ...\n  for _, vals in ipairs(_reqs) do\n    -- vals[1] is redis cmd\n    local fun = redis[vals[1]]\n    -- get params without cmd\n    table.remove(vals , 1)\n    -- invoke redis cmd \n    fun(redis, unpack(vals))\n  end\n\n  -- commit pipeline\n  local results, err = redis:commit_pipeline()\n  if not results or err then\n    _debug_err( \"failed to commit pipeline,reason:\",err)\n    return {}, err\n  end\n\n  -- check null\n  if _is_null(results) then\n    results = {}\n    ngx.log(ngx.WARN, \"redis result is null\")\n  end\n\n  -- put it into the connection pool\n  _set_keepalive_mod(self,redis)\n\n  -- if null set default value nil\n  for i,value in ipairs(results) do\n    if _is_null(value) then\n      results[i] = nil\n    end\n  end\n\n  return results, err\nend\n\n-- common method\nlocal function do_command(self, cmd, ...)\n  \n  -- pipeline reqs\n  local _reqs = rawget(self, \"_reqs\")\n  if _reqs then\n    -- append reqs\n    _reqs[#_reqs + 1] = {cmd,...}\n    return\n  end\n  \n  -- init redis\n  local redis, err = _init_connect()\n  if not redis then\n    _debug_err( \"failed to init redis,reason::\",err)\n    return nil, err\n  end\n\n  -- exec redis cmd\n  local method = redis[cmd]\n  local result, err = method(redis, ...)\n  if not result or err then\n    return nil, err\n  end\n\n  -- check null\n  if _is_null(result) then\n    result = nil\n  end\n\n  -- put it into the connection pool\n  local ok, err = _set_keepalive_mod(self,redis)\n  if not ok or err then\n    return nil, err\n  end\n\n  return result, nil\nend\n\n-- init options\nfunction _M.new(self, opts)\n  opts = opts or {} -- fixed https://github.com/anjia0532/lua-resty-redis-util/issues/4\n  if (type(opts) ~= \"table\") then\n    return nil, \"user_config must be a table\"\n  end\n\n  for k, v in pairs(opts) do\n    if k == \"host\" then\n      if type(v) ~= \"string\" then\n        return nil, \'\"host\" must be a string\'\n      end\n      host = v\n    elseif k == \"port\" then\n      if type(v) ~= \"number\" then\n        return nil, \'\"port\" must be a number\'\n      end\n      if v < 0 or v > MAX_PORT then\n        return nil, (\'\"port\" out of range 0~%s\'):format(MAX_PORT)\n      end\n      port = v\n    elseif k == \"password\" then\n      if type(v) ~= \"string\" then\n        return nil, \'\"password\" must be a string\'\n      end\n      password = v\n    elseif k == \"db_index\" then\n      if type(v) ~= \"number\" then\n        return nil, \'\"db_index\" must be a number\'\n      end\n      if v < 0 then\n        return nil, \'\"db_index\" must be >= 0\'\n      end\n      db_index = v\n    elseif k == \"timeout\" then\n      if type(v) ~= \"number\" or v < 0 then\n        return nil, \'invalid \"timeout\"\'\n      end\n      timeout = v\n    elseif k == \"keepalive\" then\n      if type(v) ~= \"number\" or v < 0 then\n        return nil, \'invalid \"keepalive\"\'\n      end\n      keepalive = v\n    elseif k == \"pool_size\" then\n      if type(v) ~= \"number\" or v < 0 then\n        return nil, \'invalid \"pool_size\"\'\n      end\n      pool_size = v\n    end\n  end\n  \n  if not (host and port) then\n    return nil, \"no redis server configured. \\\"host\\\"/\\\"port\\\" is required.\"\n  end\n  \n  return setmetatable({},mt)\nend\n\n-- dynamic cmd\nsetmetatable(_M, {__index = function(self, cmd)\n    local method =\n        function (self, ...)\n            return do_command(self, cmd, ...)\n        end\n\n  -- cache the lazily generated method in our\n  -- module table\n    _M[cmd] = method\n    return method\nend})\n\nreturn _M', '7e203abdab2136abd18a45ea63e0f067', '2022-04-06 11:09:52', '2022-04-06 11:09:53', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 85, 'mlcache.luavim: st=4 sts=4 sw=4 et:\n\nlocal cjson      = require \"cjson.safe\"\nlocal new_tab    = require \"table.new\"\nlocal lrucache   = require \"resty.lrucache\"\nlocal resty_lock = require \"resty.lock\"\nlocal tablepool\ndo\nlocal pok\npok, tablepool = pcall(require, \"tablepool\")\nif not pok then\n-- fallback for OpenResty < 1.15.8.1\ntablepool = {\nfetch = function(_, narr, nrec)\nreturn new_tab(narr, nrec)\nend,\nrelease = function(_, _, _)\n-- nop (obj will be subject to GC)\nend,\n}\nend\nend\n\n\nlocal now          = ngx.now\nlocal min          = math.min\nlocal ceil         = math.ceil\nlocal fmt          = string.format\nlocal sub          = string.sub\nlocal find         = string.find\nlocal type         = type\nlocal xpcall       = xpcall\nlocal traceback    = debug.traceback\nlocal error        = error\nlocal tostring     = tostring\nlocal tonumber     = tonumber\nlocal thread_spawn = ngx.thread.spawn\nlocal thread_wait  = ngx.thread.wait\nlocal setmetatable = setmetatable\nlocal shared       = ngx.shared\nlocal ngx_log      = ngx.log\nlocal WARN         = ngx.WARN\nlocal ERR          = ngx.ERR\n\n\nlocal CACHE_MISS_SENTINEL_LRU = {}\nlocal LOCK_KEY_PREFIX = \"lua-resty-mlcache:lock:\"\nlocal LRU_INSTANCES = setmetatable({}, { __mode = \"v\" })\nlocal SHM_SET_DEFAULT_TRIES = 3\nlocal BULK_DEFAULT_CONCURRENCY = 3\n\n\nlocal TYPES_LOOKUP = {\nnumber  = 1,\nboolean = 2,\nstring  = 3,\ntable   = 4,\n}\n\n\nlocal SHM_FLAGS = {\nstale = 0x00000001,\n}\n\n\nlocal marshallers = {\nshm_value = function(str_value, value_type, at, ttl)\nreturn fmt(\"%d:%f:%f:%s\", value_type, at, ttl, str_value)\nend,\n\nshm_nil = function(at, ttl)\nreturn fmt(\"0:%f:%f:\", at, ttl)\nend,\n\n[1] = function(number) -- number\nreturn tostring(number)\nend,\n\n[2] = function(bool)   -- boolean\nreturn bool and \"true\" or \"false\"\nend,\n\n[3] = function(str)    -- string\nreturn str\nend,\n\n[4] = function(t)      -- table\nlocal json, err = cjson.encode(t)\nif not json then\nreturn nil, \"could not encode table value: \" .. err\nend\n\nreturn json\nend,\n}\n\n\nlocal unmarshallers = {\nshm_value = function(marshalled)\n-- split our shm marshalled value by the hard-coded \":\" tokens\n-- \"type:at:ttl:value\"\n-- 1:1501831735.052000:0.500000:123\nlocal ttl_last = find(marshalled, \":\", 21, true) - 1\n\nlocal value_type = sub(marshalled, 1, 1)         -- n:...\nlocal at         = sub(marshalled, 3, 19)        -- n:1501831160\nlocal ttl        = sub(marshalled, 21, ttl_last)\nlocal str_value  = sub(marshalled, ttl_last + 2)\n\nreturn str_value, tonumber(value_type), tonumber(at), tonumber(ttl)\nend,\n\n[0] = function() -- nil\nreturn nil\nend,\n\n[1] = function(str) -- number\nreturn tonumber(str)\nend,\n\n[2] = function(str) -- boolean\nreturn str == \"true\"\nend,\n\n[3] = function(str) -- string\nreturn str\nend,\n\n[4] = function(str) -- table\nlocal t, err = cjson.decode(str)\nif not t then\nreturn nil, \"could not decode table value: \" .. err\nend\n\nreturn t\nend,\n}\n\n\nlocal function rebuild_lru(self)\nif self.lru then\nif self.lru.flush_all then\nself.lru:flush_all()\nreturn\nend\n\n-- fallback for OpenResty < 1.13.6.2\n-- Invalidate the entire LRU by GC-ing it.\nLRU_INSTANCES[self.name] = nil\nself.lru = nil\nend\n\n-- Several mlcache instances can have the same name and hence, the same\n-- lru instance. We need to GC such LRU instance when all mlcache instances\n-- using them are GC\'ed. We do this with a weak table.\nlocal lru = LRU_INSTANCES[self.name]\nif not lru then\nlru = lrucache.new(self.lru_size)\nLRU_INSTANCES[self.name] = lru\nend\n\nself.lru = lru\nend\n\n\nlocal _M     = {\n_VERSION = \"2.5.0\",\n_AUTHOR  = \"Thibault Charbonnier\",\n_LICENSE = \"MIT\",\n_URL     = \"https://github.com/thibaultcha/lua-resty-mlcache\",\n}\nlocal mt = { __index = _M }\n\n\nfunction _M.new(name, shm, opts)\nif type(name) ~= \"string\" then\nerror(\"name must be a string\", 2)\nend\n\nif type(shm) ~= \"string\" then\nerror(\"shm must be a string\", 2)\nend\n\nif opts ~= nil then\nif type(opts) ~= \"table\" then\nerror(\"opts must be a table\", 2)\nend\n\nif opts.lru_size ~= nil and type(opts.lru_size) ~= \"number\" then\nerror(\"opts.lru_size must be a number\", 2)\nend\n\nif opts.ttl ~= nil then\nif type(opts.ttl) ~= \"number\" then\nerror(\"opts.ttl must be a number\", 2)\nend\n\nif opts.ttl < 0 then\nerror(\"opts.ttl must be >= 0\", 2)\nend\nend\n\nif opts.neg_ttl ~= nil then\nif type(opts.neg_ttl) ~= \"number\" then\nerror(\"opts.neg_ttl must be a number\", 2)\nend\n\nif opts.neg_ttl < 0 then\nerror(\"opts.neg_ttl must be >= 0\", 2)\nend\nend\n\nif opts.resurrect_ttl ~= nil then\nif type(opts.resurrect_ttl) ~= \"number\" then\nerror(\"opts.resurrect_ttl must be a number\", 2)\nend\n\nif opts.resurrect_ttl < 0 then\nerror(\"opts.resurrect_ttl must be >= 0\", 2)\nend\nend\n\nif opts.resty_lock_opts ~= nil\nand type(opts.resty_lock_opts) ~= \"table\"\nthen\nerror(\"opts.resty_lock_opts must be a table\", 2)\nend\n\nif opts.ipc_shm ~= nil and type(opts.ipc_shm) ~= \"string\" then\nerror(\"opts.ipc_shm must be a string\", 2)\nend\n\nif opts.ipc ~= nil then\nif opts.ipc_shm then\nerror(\"cannot specify both of opts.ipc_shm and opts.ipc\", 2)\nend\n\nif type(opts.ipc) ~= \"table\" then\nerror(\"opts.ipc must be a table\", 2)\nend\n\nif type(opts.ipc.register_listeners) ~= \"function\" then\nerror(\"opts.ipc.register_listeners must be a function\", 2)\nend\n\nif type(opts.ipc.broadcast) ~= \"function\" then\nerror(\"opts.ipc.broadcast must be a function\", 2)\nend\n\nif opts.ipc.poll ~= nil and type(opts.ipc.poll) ~= \"function\" then\nerror(\"opts.ipc.poll must be a function\", 2)\nend\nend\n\nif opts.l1_serializer ~= nil\nand type(opts.l1_serializer) ~= \"function\"\nthen\nerror(\"opts.l1_serializer must be a function\", 2)\nend\n\nif opts.shm_set_tries ~= nil then\nif type(opts.shm_set_tries) ~= \"number\" then\nerror(\"opts.shm_set_tries must be a number\", 2)\nend\n\nif opts.shm_set_tries < 1 then\nerror(\"opts.shm_set_tries must be >= 1\", 2)\nend\nend\n\nif opts.shm_miss ~= nil and type(opts.shm_miss) ~= \"string\" then\nerror(\"opts.shm_miss must be a string\", 2)\nend\n\nif opts.shm_locks ~= nil and type(opts.shm_locks) ~= \"string\" then\nerror(\"opts.shm_locks must be a string\", 2)\nend\nelse\nopts = {}\nend\n\nlocal dict = shared[shm]\nif not dict then\nreturn nil, \"no such lua_shared_dict: \" .. shm\nend\n\nlocal dict_miss\nif opts.shm_miss then\ndict_miss = shared[opts.shm_miss]\nif not dict_miss then\nreturn nil, \"no such lua_shared_dict for opts.shm_miss: \"\n.. opts.shm_miss\nend\nend\n\nif opts.shm_locks then\nlocal dict_locks = shared[opts.shm_locks]\nif not dict_locks then\nreturn nil, \"no such lua_shared_dict for opts.shm_locks: \"\n.. opts.shm_locks\nend\nend\n\nlocal self          = {\nname            = name,\ndict            = dict,\nshm             = shm,\ndict_miss       = dict_miss,\nshm_miss        = opts.shm_miss,\nshm_locks       = opts.shm_locks or shm,\nttl             = opts.ttl     or 30,\nneg_ttl         = opts.neg_ttl or 5,\nresurrect_ttl   = opts.resurrect_ttl,\nlru_size        = opts.lru_size or 100,\nresty_lock_opts = opts.resty_lock_opts,\nl1_serializer   = opts.l1_serializer,\nshm_set_tries   = opts.shm_set_tries or SHM_SET_DEFAULT_TRIES,\ndebug           = opts.debug,\n}\n\nif opts.ipc_shm or opts.ipc then\nself.events = {\n[\"invalidation\"] = {\nchannel = fmt(\"mlcache:invalidations:%s\", name),\nhandler = function(key)\nself.lru:delete(key)\nend,\n},\n[\"purge\"] = {\nchannel = fmt(\"mlcache:purge:%s\", name),\nhandler = function()\nrebuild_lru(self)\nend,\n}\n}\n\nif opts.ipc_shm then\nlocal mlcache_ipc = require \"resty.mlcache.ipc\"\n\nlocal ipc, err = mlcache_ipc.new(opts.ipc_shm, opts.debug)\nif not ipc then\nreturn nil, \"failed to initialize mlcache IPC \" ..\n\"(could not instantiate mlcache.ipc): \" .. err\nend\n\nfor _, ev in pairs(self.events) do\nipc:subscribe(ev.channel, ev.handler)\nend\n\nself.broadcast = function(channel, data)\nreturn ipc:broadcast(channel, data)\nend\n\nself.poll = function(timeout)\nreturn ipc:poll(timeout)\nend\n\nself.ipc = ipc\n\nelse\n-- opts.ipc\nlocal ok, err = opts.ipc.register_listeners(self.events)\nif not ok and err ~= nil then\nreturn nil, \"failed to initialize custom IPC \" ..\n\"(opts.ipc.register_listeners returned an error): \"\n.. err\nend\n\nself.broadcast = opts.ipc.broadcast\nself.poll = opts.ipc.poll\n\nself.ipc = true\nend\nend\n\nif opts.lru then\nself.lru = opts.lru\n\nelse\nrebuild_lru(self)\nend\n\nreturn setmetatable(self, mt)\nend\n\n\nlocal function set_lru(self, key, value, ttl, neg_ttl, l1_serializer)\nif value == nil then\nttl = neg_ttl\nvalue = CACHE_MISS_SENTINEL_LRU\n\nelseif l1_serializer then\nlocal ok, err\nok, value, err = pcall(l1_serializer, value)\nif not ok then\nreturn nil, \"l1_serializer threw an error: \" .. value\nend\n\nif err then\nreturn nil, err\nend\n\nif value == nil then\nreturn nil, \"l1_serializer returned a nil value\"\nend\nend\n\nif ttl == 0 then\n-- indefinite ttl for lua-resty-lrucache is \'nil\'\nttl = nil\nend\n\nself.lru:set(key, value, ttl)\n\nreturn value\nend\n\n\nlocal function marshall_for_shm(value, ttl, neg_ttl)\nlocal at = now()\n\nif value == nil then\nreturn marshallers.shm_nil(at, neg_ttl), nil, true -- is_nil\nend\n\n-- serialize insertion time + Lua types for shm storage\n\nlocal value_type = TYPES_LOOKUP[type(value)]\n\nif not marshallers[value_type] then\nerror(\"cannot cache value of type \" .. type(value))\nend\n\nlocal str_marshalled, err = marshallers[value_type](value)\nif not str_marshalled then\nreturn nil, \"could not serialize value for lua_shared_dict insertion: \"\n.. err\nend\n\nreturn marshallers.shm_value(str_marshalled, value_type, at, ttl)\nend\n\n\nlocal function unmarshall_from_shm(shm_v)\nlocal str_serialized, value_type, at, ttl = unmarshallers.shm_value(shm_v)\n\nlocal value, err = unmarshallers[value_type](str_serialized)\nif err then\nreturn nil, err\nend\n\nreturn value, nil, at, ttl\nend\n\n\nlocal function set_shm(self, shm_key, value, ttl, neg_ttl, flags, shm_set_tries,\nthrow_no_mem)\nlocal shm_value, err, is_nil = marshall_for_shm(value, ttl, neg_ttl)\nif not shm_value then\nreturn nil, err\nend\n\nlocal shm = self.shm\nlocal dict = self.dict\n\nif is_nil then\nttl = neg_ttl\n\nif self.dict_miss then\nshm = self.shm_miss\ndict = self.dict_miss\nend\nend\n\n-- we will call `set()` N times to work around potential shm fragmentation.\n-- when the shm is full, it will only evict about 30 to 90 items (via\n-- LRU), which could lead to a situation where `set()` still does not\n-- have enough memory to store the cached value, in which case we\n-- try again to try to trigger more LRU evictions.\n\nlocal tries = 0\nlocal ok, err\n\nwhile tries < shm_set_tries do\ntries = tries + 1\n\nok, err = dict:set(shm_key, shm_value, ttl, flags or 0)\nif ok or err and err ~= \"no memory\" then\nbreak\nend\nend\n\nif not ok then\nif err ~= \"no memory\" or throw_no_mem then\nreturn nil, \"could not write to lua_shared_dict \'\" .. shm\n.. \"\': \" .. err\nend\n\nngx_log(WARN, \"could not write to lua_shared_dict \'\",\nshm, \"\' after \", tries, \" tries (no memory), \",\n\"it is either fragmented or cannot allocate more \",\n\"memory, consider increasing \'opts.shm_set_tries\'\")\nend\n\nreturn true\nend\n\n\nlocal function set_shm_set_lru(self, key, shm_key, value, ttl, neg_ttl, flags,\nshm_set_tries, l1_serializer, throw_no_mem)\n\nlocal ok, err = set_shm(self, shm_key, value, ttl, neg_ttl, flags,\nshm_set_tries, throw_no_mem)\nif not ok then\nreturn nil, err\nend\n\nreturn set_lru(self, key, value, ttl, neg_ttl, l1_serializer)\nend\n\n\nlocal function get_shm_set_lru(self, key, shm_key, l1_serializer)\nlocal v, shmerr, went_stale = self.dict:get_stale(shm_key)\nif v == nil and shmerr then\n-- shmerr can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. shmerr\nend\n\nif self.shm_miss and v == nil then\n-- if we cache misses in another shm, maybe it is there\nv, shmerr, went_stale = self.dict_miss:get_stale(shm_key)\nif v == nil and shmerr then\n-- shmerr can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. shmerr\nend\nend\n\nif v ~= nil then\nlocal value, err, at, ttl = unmarshall_from_shm(v)\nif err then\nreturn nil, \"could not deserialize value after lua_shared_dict \" ..\n\"retrieval: \" .. err\nend\n\nif went_stale then\nreturn value, nil, went_stale\nend\n\n-- \'shmerr\' is \'flags\' on :get_stale() success\nlocal is_stale = shmerr == SHM_FLAGS.stale\n\nlocal remaining_ttl\nif ttl == 0 then\n-- indefinite ttl, keep \'0\' as it means \'forever\'\nremaining_ttl = 0\n\nelse\n-- compute elapsed time to get remaining ttl for LRU caching\nremaining_ttl = ttl - (now() - at)\n\nif remaining_ttl <= 0 then\n-- value has less than 1ms of lifetime in the shm, avoid\n-- setting it in LRU which would be wasteful and could\n-- indefinitely cache the value when ttl == 0\nreturn value, nil, nil, is_stale\nend\nend\n\nvalue, err = set_lru(self, key, value, remaining_ttl, remaining_ttl,\nl1_serializer)\nif err then\nreturn nil, err\nend\n\nreturn value, nil, nil, is_stale\nend\nend\n\n\nlocal function check_opts(self, opts)\nlocal ttl\nlocal neg_ttl\nlocal resurrect_ttl\nlocal l1_serializer\nlocal shm_set_tries\n\nif opts ~= nil then\nif type(opts) ~= \"table\" then\nerror(\"opts must be a table\", 3)\nend\n\nttl = opts.ttl\nif ttl ~= nil then\nif type(ttl) ~= \"number\" then\nerror(\"opts.ttl must be a number\", 3)\nend\n\nif ttl < 0 then\nerror(\"opts.ttl must be >= 0\", 3)\nend\nend\n\nneg_ttl = opts.neg_ttl\nif neg_ttl ~= nil then\nif type(neg_ttl) ~= \"number\" then\nerror(\"opts.neg_ttl must be a number\", 3)\nend\n\nif neg_ttl < 0 then\nerror(\"opts.neg_ttl must be >= 0\", 3)\nend\nend\n\nresurrect_ttl = opts.resurrect_ttl\nif resurrect_ttl ~= nil then\nif type(resurrect_ttl) ~= \"number\" then\nerror(\"opts.resurrect_ttl must be a number\", 3)\nend\n\nif resurrect_ttl < 0 then\nerror(\"opts.resurrect_ttl must be >= 0\", 3)\nend\nend\n\nl1_serializer = opts.l1_serializer\nif l1_serializer ~= nil and type(l1_serializer) ~= \"function\" then\nerror(\"opts.l1_serializer must be a function\", 3)\nend\n\nshm_set_tries = opts.shm_set_tries\nif shm_set_tries ~= nil then\nif type(shm_set_tries) ~= \"number\" then\nerror(\"opts.shm_set_tries must be a number\", 3)\nend\n\nif shm_set_tries < 1 then\nerror(\"opts.shm_set_tries must be >= 1\", 3)\nend\nend\nend\n\nif not ttl then\nttl = self.ttl\nend\n\nif not neg_ttl then\nneg_ttl = self.neg_ttl\nend\n\nif not resurrect_ttl then\nresurrect_ttl = self.resurrect_ttl\nend\n\nif not l1_serializer then\nl1_serializer = self.l1_serializer\nend\n\nif not shm_set_tries then\nshm_set_tries = self.shm_set_tries\nend\n\nreturn ttl, neg_ttl, resurrect_ttl, l1_serializer, shm_set_tries\nend\n\n\nlocal function unlock_and_ret(lock, res, err, hit_lvl)\nlocal ok, lerr = lock:unlock()\nif not ok and lerr ~= \"unlocked\" then\nreturn nil, \"could not unlock callback: \" .. lerr\nend\n\nreturn res, err, hit_lvl\nend\n\n\nlocal function run_callback(self, key, shm_key, data, ttl, neg_ttl,\nwent_stale, l1_serializer, resurrect_ttl, shm_set_tries, cb, ...)\nlocal lock, err = resty_lock:new(self.shm_locks, self.resty_lock_opts)\nif not lock then\nreturn nil, \"could not create lock: \" .. err\nend\n\nlocal elapsed, lerr = lock:lock(LOCK_KEY_PREFIX .. shm_key)\nif not elapsed and lerr ~= \"timeout\" then\nreturn nil, \"could not acquire callback lock: \" .. lerr\nend\n\ndo\n-- check for another worker\'s success at running the callback, but\n-- do not return data if it is still the same stale value (this is\n-- possible if the value was still not evicted between the first\n-- get() and this one)\n\nlocal data2, err, went_stale2, stale2 = get_shm_set_lru(self, key,\nshm_key,\nl1_serializer)\nif err then\nreturn unlock_and_ret(lock, nil, err)\nend\n\nif data2 ~= nil and not went_stale2 then\n-- we got a fresh item from shm: other worker succeeded in running\n-- the callback\nif data2 == CACHE_MISS_SENTINEL_LRU then\ndata2 = nil\nend\n\nreturn unlock_and_ret(lock, data2, nil, stale2 and 4 or 2)\nend\nend\n\n-- we are either the 1st worker to hold the lock, or\n-- a subsequent worker whose lock has timed out before the 1st one\n-- finished to run the callback\n\nif lerr == \"timeout\" then\nlocal errmsg = \"could not acquire callback lock: timeout\"\n\n-- no stale data nor desire to resurrect it\nif not went_stale or not resurrect_ttl then\nreturn nil, errmsg\nend\n\n-- do not resurrect the value here (another worker is running the\n-- callback and will either get the new value, or resurrect it for\n-- us if the callback fails)\n\nngx_log(WARN, errmsg)\n\n-- went_stale is true, hence the value cannot be set in the LRU\n-- cache, and cannot be CACHE_MISS_SENTINEL_LRU\n\nreturn data, nil, 4\nend\n\n-- still not in shm, we are the 1st worker to hold the lock, and thus\n-- responsible for running the callback\n\nlocal pok, perr, err, new_ttl = xpcall(cb, traceback, ...)\nif not pok then\nreturn unlock_and_ret(lock, nil, \"callback threw an error: \" ..\ntostring(perr))\nend\n\nif err then\n-- callback returned nil + err\n\n-- be resilient in case callbacks return wrong error type\nerr = tostring(err)\n\n-- no stale data nor desire to resurrect it\nif not went_stale or not resurrect_ttl then\nreturn unlock_and_ret(lock, perr, err)\nend\n\n-- we got \'data\' from the shm, even though it is stale\n--   1. log as warn that the callback returned an error\n--   2. resurrect: insert it back into shm if \'resurrect_ttl\'\n--   3. signify the staleness with a high hit_lvl of \'4\'\n\nngx_log(WARN, \"callback returned an error (\", err, \") but stale \",\n\"value found in shm will be resurrected for \",\nresurrect_ttl, \"s (resurrect_ttl)\")\n\nlocal res_data, res_err = set_shm_set_lru(self, key, shm_key,\ndata, resurrect_ttl,\nresurrect_ttl,\nSHM_FLAGS.stale,\nshm_set_tries, l1_serializer)\nif res_err then\nngx_log(WARN, \"could not resurrect stale data (\", res_err, \")\")\nend\n\nif res_data == CACHE_MISS_SENTINEL_LRU then\nres_data = nil\nend\n\nreturn unlock_and_ret(lock, res_data, nil, 4)\nend\n\n-- successful callback run returned \'data, nil, new_ttl?\'\n\ndata = perr\n\n-- override ttl / neg_ttl\n\nif type(new_ttl) == \"number\" then\nif new_ttl < 0 then\n-- bypass cache\nreturn unlock_and_ret(lock, data, nil, 3)\nend\n\nif data == nil then\nneg_ttl = new_ttl\n\nelse\nttl = new_ttl\nend\nend\n\ndata, err = set_shm_set_lru(self, key, shm_key, data, ttl, neg_ttl, nil,\nshm_set_tries, l1_serializer)\nif err then\nreturn unlock_and_ret(lock, nil, err)\nend\n\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\n-- unlock and return\n\nreturn unlock_and_ret(lock, data, nil, 3)\nend\n\n\nfunction _M:get(key, opts, cb, ...)\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\nif cb ~= nil and type(cb) ~= \"function\" then\nerror(\"callback must be nil or a function\", 2)\nend\n\n-- worker LRU cache retrieval\n\nlocal data = self.lru:get(key)\nif data == CACHE_MISS_SENTINEL_LRU then\nreturn nil, nil, 1\nend\n\nif data ~= nil then\nreturn data, nil, 1\nend\n\n-- not in worker\'s LRU cache, need shm lookup\n\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal namespaced_key = self.name .. key\n\n-- opts validation\n\nlocal ttl, neg_ttl, resurrect_ttl, l1_serializer, shm_set_tries =\ncheck_opts(self, opts)\n\nlocal err, went_stale, is_stale\ndata, err, went_stale, is_stale = get_shm_set_lru(self, key, namespaced_key,\nl1_serializer)\nif err then\nreturn nil, err\nend\n\nif data ~= nil and not went_stale then\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\nreturn data, nil, is_stale and 4 or 2\nend\n\n-- not in shm either\n\nif cb == nil then\n-- no L3 callback, early exit\nreturn nil, nil, -1\nend\n\n-- L3 callback, single worker to run it\n\nreturn run_callback(self, key, namespaced_key, data, ttl, neg_ttl,\nwent_stale, l1_serializer, resurrect_ttl,\nshm_set_tries, cb, ...)\nend\n\n\ndo\nlocal function run_thread(self, ops, from, to)\nfor i = from, to do\nlocal ctx = ops[i]\n\nctx.data, ctx.err, ctx.hit_lvl = run_callback(self, ctx.key,\nctx.shm_key, ctx.data,\nctx.ttl, ctx.neg_ttl,\nctx.went_stale,\nctx.l1_serializer,\nctx.resurrect_ttl,\nctx.shm_set_tries,\nctx.cb, ctx.arg)\nend\nend\n\n\nlocal bulk_mt = {}\nbulk_mt.__index = bulk_mt\n\n\nfunction _M.new_bulk(n_ops)\nlocal bulk = new_tab((n_ops or 2) * 4, 1) -- 4 slots per op\nbulk.n = 0\n\nreturn setmetatable(bulk, bulk_mt)\nend\n\n\nfunction bulk_mt:add(key, opts, cb, arg)\nlocal i = (self.n * 4) + 1\nself[i] = key\nself[i + 1] = opts\nself[i + 2] = cb\nself[i + 3] = arg\nself.n = self.n + 1\nend\n\n\nlocal function bulk_res_iter(res, i)\nlocal idx = i * 3 + 1\nif idx > res.n then\nreturn\nend\n\ni = i + 1\n\nlocal data = res[idx]\nlocal err = res[idx + 1]\nlocal hit_lvl = res[idx + 2]\n\nreturn i, data, err, hit_lvl\nend\n\n\nfunction _M.each_bulk_res(res)\nif not res.n then\nerror(\"res must have res.n field; is this a get_bulk() result?\", 2)\nend\n\nreturn bulk_res_iter, res, 0\nend\n\n\nfunction _M:get_bulk(bulk, opts)\nif type(bulk) ~= \"table\" then\nerror(\"bulk must be a table\", 2)\nend\n\nif not bulk.n then\nerror(\"bulk must have n field\", 2)\nend\n\nif opts then\nif type(opts) ~= \"table\" then\nerror(\"opts must be a table\", 2)\nend\n\nif opts.concurrency then\nif type(opts.concurrency) ~= \"number\" then\nerror(\"opts.concurrency must be a number\", 2)\nend\n\nif opts.concurrency <= 0 then\nerror(\"opts.concurrency must be > 0\", 2)\nend\nend\nend\n\nlocal n_bulk = bulk.n * 4\nlocal res = new_tab(n_bulk - n_bulk / 4, 1)\nlocal res_idx = 1\n\n-- only used if running L3 callbacks\nlocal n_cbs = 0\nlocal cb_ctxs\n\n-- bulk\n-- { \"key\", opts, cb, arg }\n--\n-- res\n-- { data, \"err\", hit_lvl }\n\nfor i = 1, n_bulk, 4 do\nlocal b_key = bulk[i]\nlocal b_opts = bulk[i + 1]\nlocal b_cb = bulk[i + 2]\n\nif type(b_key) ~= \"string\" then\nerror(\"key at index \" .. i .. \" must be a string for operation \" ..\nceil(i / 4) .. \" (got \" .. type(b_key) .. \")\", 2)\nend\n\nif type(b_cb) ~= \"function\" then\nerror(\"callback at index \" .. i + 2 .. \" must be a function \" ..\n\"for operation \" .. ceil(i / 4) .. \" (got \" .. type(b_cb) ..\n\")\", 2)\nend\n\n-- worker LRU cache retrieval\n\nlocal data = self.lru:get(b_key)\nif data ~= nil then\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\nres[res_idx] = data\n--res[res_idx + 1] = nil\nres[res_idx + 2] = 1\n\nelse\nlocal pok, ttl, neg_ttl, resurrect_ttl, l1_serializer, shm_set_tries\n= pcall(check_opts, self, b_opts)\nif not pok then\n-- strip the stacktrace\nlocal err = ttl:match(\"mlcache%.lua:%d+:%s(.*)\")\nerror(\"options at index \" .. i + 1 .. \" for operation \" ..\nceil(i / 4) .. \" are invalid: \" .. err, 2)\nend\n\n-- not in worker\'s LRU cache, need shm lookup\n-- we will prepare a task for each cache miss\nlocal namespaced_key = self.name .. b_key\n\nlocal err, went_stale, is_stale\ndata, err, went_stale, is_stale = get_shm_set_lru(self, b_key,\nnamespaced_key,\nl1_serializer)\nif err then\n--res[res_idx] = nil\nres[res_idx + 1] = err\n--res[res_idx + 2] = nil\n\nelseif data ~= nil and not went_stale then\nif data == CACHE_MISS_SENTINEL_LRU then\ndata = nil\nend\n\nres[res_idx] = data\n--res[res_idx + 1] = nil\nres[res_idx + 2] = is_stale and 4 or 2\n\nelse\n-- not in shm either, we have to prepare a task to run the\n-- L3 callback\n\nn_cbs = n_cbs + 1\n\nif n_cbs == 1 then\ncb_ctxs = tablepool.fetch(\"bulk_cb_ctxs\", 1, 0)\nend\n\nlocal ctx = tablepool.fetch(\"bulk_cb_ctx\", 0, 15)\nctx.res_idx = res_idx\nctx.cb = b_cb\nctx.arg = bulk[i + 3] -- arg\nctx.key = b_key\nctx.shm_key = namespaced_key\nctx.data = data\nctx.ttl = ttl\nctx.neg_ttl = neg_ttl\nctx.went_stale = went_stale\nctx.l1_serializer = l1_serializer\nctx.resurrect_ttl = resurrect_ttl\nctx.shm_set_tries = shm_set_tries\nctx.data = data\nctx.err = nil\nctx.hit_lvl = nil\n\ncb_ctxs[n_cbs] = ctx\nend\nend\n\nres_idx = res_idx + 3\nend\n\nif n_cbs == 0 then\n-- no callback to run, all items were in L1/L2\nres.n = res_idx - 1\nreturn res\nend\n\n-- some L3 callbacks have to run\n-- schedule threads as per our concurrency settings\n-- we will use this thread as well\n\nlocal concurrency\nif opts then\nconcurrency = opts.concurrency\nend\n\nif not concurrency then\nconcurrency = BULK_DEFAULT_CONCURRENCY\nend\n\nlocal threads\nlocal threads_idx = 0\n\ndo\n-- spawn concurrent threads\nlocal thread_size\nlocal n_threads = min(n_cbs, concurrency) - 1\n\nif n_threads >  0 then\nthreads = tablepool.fetch(\"bulk_threads\", n_threads, 0)\nthread_size = ceil(n_cbs / concurrency)\nend\n\nif self.debug then\nngx.log(ngx.DEBUG, \"spawning \", n_threads, \" threads to run \",\nn_cbs, \" callbacks\")\nend\n\nlocal from = 1\nlocal rest = n_cbs\n\nfor i = 1, n_threads do\nlocal to\nif rest >= thread_size then\nrest = rest - thread_size\nto = from + thread_size - 1\nelse\nrest = 0\nto = from\nend\n\nif self.debug then\nngx.log(ngx.DEBUG, \"thread \", i, \" running callbacks \", from,\n\" to \", to)\nend\n\nthreads_idx = threads_idx + 1\nthreads[i] = thread_spawn(run_thread, self, cb_ctxs, from, to)\n\nfrom = from + thread_size\n\nif rest == 0 then\nbreak\nend\nend\n\nif rest > 0 then\n-- use this thread as one of our concurrent threads\nlocal to = from + rest - 1\n\nif self.debug then\nngx.log(ngx.DEBUG, \"main thread running callbacks \", from,\n\" to \", to)\nend\n\nrun_thread(self, cb_ctxs, from, to)\nend\nend\n\n-- wait for other threads\n\nfor i = 1, threads_idx do\nlocal ok, err = thread_wait(threads[i])\nif not ok then\n-- when thread_wait() fails, we don\'t get res_idx, and thus\n-- cannot populate the appropriate res indexes with the\n-- error\nngx_log(ERR, \"failed to wait for thread number \", i, \": \", err)\nend\nend\n\nfor i = 1, n_cbs do\nlocal ctx = cb_ctxs[i]\nlocal ctx_res_idx = ctx.res_idx\n\nres[ctx_res_idx] = ctx.data\nres[ctx_res_idx + 1] = ctx.err\nres[ctx_res_idx + 2] = ctx.hit_lvl\n\ntablepool.release(\"bulk_cb_ctx\", ctx, true) -- no clear tab\nend\n\ntablepool.release(\"bulk_cb_ctxs\", cb_ctxs)\n\nif threads then\ntablepool.release(\"bulk_threads\", threads)\nend\n\nres.n = res_idx - 1\n\nreturn res\nend\n\n\nend -- get_bulk()\n\n\nfunction _M:peek(key, stale)\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal namespaced_key = self.name .. key\n\nlocal v, err, went_stale = self.dict:get_stale(namespaced_key)\nif v == nil and err then\n-- err can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. err\nend\n\n-- if we specified shm_miss, it might be a negative hit cached\n-- there\nif self.dict_miss and v == nil then\nv, err, went_stale = self.dict_miss:get_stale(namespaced_key)\nif v == nil and err then\n-- err can be \'flags\' upon successful get_stale() calls, so we\n-- also check v == nil\nreturn nil, \"could not read from lua_shared_dict: \" .. err\nend\nend\n\nif went_stale and not stale then\nreturn nil\nend\n\nif v ~= nil then\nlocal value, err, at, ttl = unmarshall_from_shm(v)\nif err then\nreturn nil, \"could not deserialize value after lua_shared_dict \" ..\n\"retrieval: \" .. err\nend\n\nlocal remaining_ttl = ttl - (now() - at)\n\nreturn remaining_ttl, nil, value, went_stale\nend\nend\n\n\nfunction _M:set(key, opts, value)\nif not self.broadcast then\nerror(\"no ipc to propagate update, specify opts.ipc_shm or opts.ipc\", 2)\nend\n\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\ndo\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal ttl, neg_ttl, _, l1_serializer, shm_set_tries = check_opts(self,\nopts)\nlocal namespaced_key = self.name .. key\n\nif self.dict_miss then\n-- since we specified a separate shm for negative caches, we\n-- must make sure that we clear any value that may have been\n-- set in the other shm\nlocal dict = value == nil and self.dict or self.dict_miss\n\n-- TODO: there is a potential race-condition here between this\n--       :delete() and the subsequent :set() in set_shm()\nlocal ok, err = dict:delete(namespaced_key)\nif not ok then\nreturn nil, \"could not delete from shm: \" .. err\nend\nend\n\nlocal _, err = set_shm_set_lru(self, key, namespaced_key, value, ttl,\nneg_ttl, nil, shm_set_tries,\nl1_serializer, true)\nif err then\nreturn nil, err\nend\nend\n\nlocal _, err = self.broadcast(self.events.invalidation.channel, key)\nif err then\nreturn nil, \"could not broadcast update: \" .. err\nend\n\nreturn true\nend\n\n\nfunction _M:delete(key)\nif not self.broadcast then\nerror(\"no ipc to propagate deletion, specify opts.ipc_shm or opts.ipc\",\n2)\nend\n\nif type(key) ~= \"string\" then\nerror(\"key must be a string\", 2)\nend\n\n-- delete from shm first\ndo\n-- restrict this key to the current namespace, so we isolate this\n-- mlcache instance from potential other instances using the same\n-- shm\nlocal namespaced_key = self.name .. key\n\nlocal ok, err = self.dict:delete(namespaced_key)\nif not ok then\nreturn nil, \"could not delete from shm: \" .. err\nend\n\n-- instance uses shm_miss for negative caches, since we don\'t know\n-- where the cached value is (is it nil or not?), we must remove it\n-- from both\nif self.dict_miss then\nok, err = self.dict_miss:delete(namespaced_key)\nif not ok then\nreturn nil, \"could not delete from shm: \" .. err\nend\nend\nend\n\n-- delete from LRU and propagate\nself.lru:delete(key)\n\nlocal _, err = self.broadcast(self.events.invalidation.channel, key)\nif err then\nreturn nil, \"could not broadcast deletion: \" .. err\nend\n\nreturn true\nend\n\n\nfunction _M:purge(flush_expired)\nif not self.broadcast then\nerror(\"no ipc to propagate purge, specify opts.ipc_shm or opts.ipc\", 2)\nend\n\nif not self.lru.flush_all and LRU_INSTANCES[self.name] ~= self.lru then\nerror(\"cannot purge when using custom LRU cache with \" ..\n\"OpenResty < 1.13.6.2\", 2)\nend\n\n-- clear shm first\nself.dict:flush_all()\n\n-- clear negative caches shm if specified\nif self.dict_miss then\nself.dict_miss:flush_all()\nend\n\nif flush_expired then\nself.dict:flush_expired()\n\nif self.dict_miss then\nself.dict_miss:flush_expired()\nend\nend\n\n-- clear LRU content and propagate\nrebuild_lru(self)\n\nlocal _, err = self.broadcast(self.events.purge.channel, \"\")\nif err then\nreturn nil, \"could not broadcast purge: \" .. err\nend\n\nreturn true\nend\n\n\nfunction _M:update(timeout)\nif not self.poll then\nerror(\"no polling configured, specify opts.ipc_shm or opts.ipc.poll\", 2)\nend\n\nlocal _, err = self.poll(timeout)\nif err then\nreturn nil, \"could not poll ipc events: \" .. err\nend\n\nreturn true\nend\n\n\nreturn _M\n', '5fb0acca50d5eda4b52a6d5e8729fd06', '2022-04-06 11:11:29', '2022-04-06 11:11:30', NULL, '172.17.0.1', 'I', 'openresty');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 86, 'ipc.luavim: st=4 sts=4 sw=4 et:\n\nlocal ERR          = ngx.ERR\nlocal WARN         = ngx.WARN\nlocal INFO         = ngx.INFO\nlocal sleep        = ngx.sleep\nlocal shared       = ngx.shared\nlocal worker_pid   = ngx.worker.pid\nlocal ngx_log      = ngx.log\nlocal fmt          = string.format\nlocal sub          = string.sub\nlocal find         = string.find\nlocal min          = math.min\nlocal type         = type\nlocal pcall        = pcall\nlocal error        = error\nlocal insert       = table.insert\nlocal tonumber     = tonumber\nlocal setmetatable = setmetatable\n\n\nlocal INDEX_KEY        = \"lua-resty-ipc:index\"\nlocal FORCIBLE_KEY     = \"lua-resty-ipc:forcible\"\nlocal POLL_SLEEP_RATIO = 2\n\n\nlocal function marshall(worker_pid, channel, data)\nreturn fmt(\"%d:%d:%s%s\", worker_pid, #data, channel, data)\nend\n\n\nlocal function unmarshall(str)\nlocal sep_1 = find(str, \":\", nil      , true)\nlocal sep_2 = find(str, \":\", sep_1 + 1, true)\n\nlocal pid      = tonumber(sub(str, 1        , sep_1 - 1))\nlocal data_len = tonumber(sub(str, sep_1 + 1, sep_2 - 1))\n\nlocal channel_last_pos = #str - data_len\n\nlocal channel = sub(str, sep_2 + 1, channel_last_pos)\nlocal data    = sub(str, channel_last_pos + 1)\n\nreturn pid, channel, data\nend\n\n\nlocal function log(lvl, ...)\nreturn ngx_log(lvl, \"[ipc] \", ...)\nend\n\n\nlocal _M = {}\nlocal mt = { __index = _M }\n\n\nfunction _M.new(shm, debug)\nlocal dict = shared[shm]\nif not dict then\nreturn nil, \"no such lua_shared_dict: \" .. shm\nend\n\nlocal self    = {\ndict      = dict,\npid       = debug and 0 or worker_pid(),\nidx       = 0,\ncallbacks = {},\n}\n\nreturn setmetatable(self, mt)\nend\n\n\nfunction _M:subscribe(channel, cb)\nif type(channel) ~= \"string\" then\nerror(\"channel must be a string\", 2)\nend\n\nif type(cb) ~= \"function\" then\nerror(\"callback must be a function\", 2)\nend\n\nif not self.callbacks[channel] then\nself.callbacks[channel] = { cb }\n\nelse\ninsert(self.callbacks[channel], cb)\nend\nend\n\n\nfunction _M:broadcast(channel, data)\nif type(channel) ~= \"string\" then\nerror(\"channel must be a string\", 2)\nend\n\nif type(data) ~= \"string\" then\nerror(\"data must be a string\", 2)\nend\n\nlocal marshalled_event = marshall(worker_pid(), channel, data)\n\nlocal idx, err = self.dict:incr(INDEX_KEY, 1, 0)\nif not idx then\nreturn nil, \"failed to increment index: \" .. err\nend\n\nlocal ok, err, forcible = self.dict:set(idx, marshalled_event)\nif not ok then\nreturn nil, \"failed to insert event in shm: \" .. err\nend\n\nif forcible then\n-- take note that eviction has started\n-- we repeat this flagging to avoid this key from ever being\n-- evicted itself\nlocal ok, err = self.dict:set(FORCIBLE_KEY, true)\nif not ok then\nreturn nil, \"failed to set forcible flag in shm: \" .. err\nend\nend\n\nreturn true\nend\n\n\n-- Note: if this module were to be used by users (that is, users can implement\n-- their own pub/sub events and thus, callbacks), this method would then need\n-- to consider the time spent in callbacks to prevent long running callbacks\n-- from penalizing the worker.\n-- Since this module is currently only used by mlcache, whose callback is an\n-- shm operation, we only worry about the time spent waiting for events\n-- between the \'incr()\' and \'set()\' race condition.\nfunction _M:poll(timeout)\nif timeout ~= nil and type(timeout) ~= \"number\" then\nerror(\"timeout must be a number\", 2)\nend\n\nlocal shm_idx, err = self.dict:get(INDEX_KEY)\nif err then\nreturn nil, \"failed to get index: \" .. err\nend\n\nif shm_idx == nil then\n-- no events to poll yet\nreturn true\nend\n\nif type(shm_idx) ~= \"number\" then\nreturn nil, \"index is not a number, shm tampered with\"\nend\n\nif not timeout then\ntimeout = 0.3\nend\n\nif self.idx == 0 then\nlocal forcible, err = self.dict:get(FORCIBLE_KEY)\nif err then\nreturn nil, \"failed to get forcible flag from shm: \" .. err\nend\n\nif forcible then\n-- shm lru eviction occurred, we are likely a new worker\n-- skip indexes that may have been evicted and resume current\n-- polling idx\nself.idx = shm_idx - 1\nend\n\nelse\n-- guard: self.idx <= shm_idx\nself.idx = min(self.idx, shm_idx)\nend\n\nlocal elapsed = 0\n\nfor _ = self.idx, shm_idx - 1 do\n-- fetch event from shm with a retry policy in case\n-- we run our :get() in between another worker\'s\n-- :incr() and :set()\n\nlocal v\nlocal idx = self.idx + 1\n\ndo\nlocal perr\nlocal pok        = true\nlocal sleep_step = 0.001\n\nwhile elapsed < timeout do\nv, err = self.dict:get(idx)\nif v ~= nil or err then\nbreak\nend\n\nif pok then\nlog(INFO, \"no event data at index \'\", idx, \"\', \",\n\"retrying in: \", sleep_step, \"s\")\n\n-- sleep is not available in all ngx_lua contexts\n-- if we fail once, never retry to sleep\npok, perr = pcall(sleep, sleep_step)\nif not pok then\nlog(WARN, \"could not sleep before retry: \", perr,\n\" (note: it is safer to call this function \",\n\"in contexts that support the ngx.sleep() \",\n\"API)\")\nend\nend\n\nelapsed    = elapsed + sleep_step\nsleep_step = min(sleep_step * POLL_SLEEP_RATIO,\ntimeout - elapsed)\nend\nend\n\n-- fetch next event on next iteration\n-- even if we timeout, we might miss 1 event (we return in timeout and\n-- we don\'t retry that event), but it\'s better than being stuck forever\n-- on an event that might have been evicted from the shm.\nself.idx = idx\n\nif elapsed >= timeout then\nreturn nil, \"timeout\"\nend\n\nif err then\nlog(ERR, \"could not get event at index \'\", self.idx, \"\': \", err)\n\nelseif type(v) ~= \"string\" then\nlog(ERR, \"event at index \'\", self.idx, \"\' is not a string, \",\n\"shm tampered with\")\n\nelse\nlocal pid, channel, data = unmarshall(v)\n\nif self.pid ~= pid then\n-- coming from another worker\nlocal cbs = self.callbacks[channel]\nif cbs then\nfor j = 1, #cbs do\nlocal pok, perr = pcall(cbs[j], data)\nif not pok then\nlog(ERR, \"callback for channel \'\", channel,\n\"\' threw a Lua error: \", perr)\nend\nend\nend\nend\nend\nend\n\nreturn true\nend\n\n\nreturn _M\n', '3766725ca52da89d0d08dd0a6241311c', '2022-04-06 11:12:26', '2022-04-06 11:12:27', NULL, '172.17.0.1', 'I', 'openresty');
COMMIT;

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
  `role` varchar(50) NOT NULL,
  `resource` varchar(255) NOT NULL,
  `action` varchar(8) NOT NULL,
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of permissions
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `username` varchar(50) NOT NULL,
  `role` varchar(50) NOT NULL,
  UNIQUE KEY `idx_user_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of roles
-- ----------------------------
BEGIN;
INSERT INTO `roles` (`username`, `role`) VALUES ('nacos', 'ROLE_ADMIN');
COMMIT;

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
BEGIN;
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (1, '1', 'waibao', 'waibao', '外包', 'nacos', 1648642339859, 1648642339859);
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (2, '1', 'openresty', 'openresty', 'Openresty', 'nacos', 1648874802755, 1648874802755);
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(50) NOT NULL,
  `password` varchar(500) NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
